{"version":3,"sources":["../source/types.test.js"],"names":["metadata","Metadata","get_number_type_custom","check_number_length_for_type","get_number_type","parameters","push","apply","describe","it","should","equal","check_number_length","undefined","thrower","phone","throw","country","type","something","number","_metadata"],"mappings":"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","file":"types.test.js","sourcesContent":["import metadata from '../metadata.full'\r\nimport Metadata from './metadata'\r\nimport get_number_type_custom, { check_number_length_for_type } from '../source/types'\r\n\r\nfunction get_number_type(...parameters)\r\n{\r\n\tparameters.push(metadata)\r\n\treturn get_number_type_custom.apply(this, parameters)\r\n}\r\n\r\ndescribe('get_number_type', () =>\r\n{\r\n\tit('should infer phone number type MOBILE', function()\r\n\t{\r\n\t\tget_number_type('9150000000', 'RU').should.equal('MOBILE')\r\n\t\tget_number_type('7912345678', 'GB').should.equal('MOBILE')\r\n\t\tget_number_type('91187654321', 'AR').should.equal('MOBILE')\r\n\t\tget_number_type('15123456789', 'DE').should.equal('MOBILE')\r\n\t\tget_number_type('51234567', 'EE').should.equal('MOBILE')\r\n\t})\r\n\r\n\tit('should infer phone number types', function()\r\n\t{\r\n\t\tget_number_type('88005553535', 'RU').should.equal('TOLL_FREE')\r\n\t\tget_number_type('8005553535', 'RU').should.equal('TOLL_FREE')\r\n\t\tget_number_type('4957777777', 'RU').should.equal('FIXED_LINE')\r\n\t\tget_number_type('8030000000', 'RU').should.equal('PREMIUM_RATE')\r\n\r\n\t\tget_number_type('2133734253', 'US').should.equal('FIXED_LINE_OR_MOBILE')\r\n\t\tget_number_type('5002345678', 'US').should.equal('PERSONAL_NUMBER')\r\n\t})\r\n\r\n\tit('should return FIXED_LINE_OR_MOBILE when there is ambiguity', () =>\r\n\t{\r\n\t\t// (no such country in the metadata, therefore no unit test for this `if`)\r\n\t})\r\n\r\n\tit('should check phone number length', function()\r\n\t{\r\n\t\t// Too short.\r\n\t\tcheck_number_length('800555353', 'FIXED_LINE', 'RU').should.equal('TOO_SHORT')\r\n\t\t// Normal.\r\n\t\tcheck_number_length('8005553535', 'FIXED_LINE', 'RU').should.equal('IS_POSSIBLE')\r\n\t\t// Too long.\r\n\t\tcheck_number_length('80055535355', 'FIXED_LINE', 'RU').should.equal('TOO_LONG')\r\n\r\n\t\t// No such type.\r\n\t\tcheck_number_length('169454850', 'VOIP', 'AC').should.equal('INVALID_LENGTH')\r\n\t\t// No such possible length.\r\n\t\tcheck_number_length('1694548', undefined, 'AD').should.equal('INVALID_LENGTH')\r\n\r\n\t\t// FIXED_LINE_OR_MOBILE\r\n\t\tcheck_number_length('1694548', 'FIXED_LINE_OR_MOBILE', 'AD').should.equal('INVALID_LENGTH')\r\n\t\t// No mobile phones.\r\n\t\tcheck_number_length('8123', 'FIXED_LINE_OR_MOBILE', 'TA').should.equal('IS_POSSIBLE')\r\n\t\t// No \"possible lengths\" for \"mobile\".\r\n\t\tcheck_number_length('81234567', 'FIXED_LINE_OR_MOBILE', 'SZ').should.equal('IS_POSSIBLE')\r\n\t})\r\n\r\n\tit('should work in edge cases', function()\r\n\t{\r\n\t\t// No metadata\r\n\t\tlet thrower = () => get_number_type_custom({ phone: '+78005553535' })\r\n\t\tthrower.should.throw('Metadata is required')\r\n\r\n\t\t// Parsed phone number\r\n\t\tget_number_type({ phone: '8005553535', country: 'RU' }).should.equal('TOLL_FREE')\r\n\r\n\t\t// Invalid phone number\r\n\t\ttype(get_number_type('123', 'RU')).should.equal('undefined')\r\n\r\n\t\t// Invalid country\r\n\t\tthrower = () => get_number_type({ phone: '8005553535', country: 'RUS' })\r\n\t\tthrower.should.throw('Unknown country')\r\n\r\n\t\t// Numerical `value`\r\n\t\tthrower = () => get_number_type(89150000000, 'RU')\r\n\t\tthrower.should.throw('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\t})\r\n})\r\n\r\nfunction type(something)\r\n{\r\n\treturn typeof something\r\n}\r\n\r\nfunction check_number_length(number, type, country)\r\n{\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.country(country)\r\n\treturn check_number_length_for_type(number, type, _metadata)\r\n}"]}