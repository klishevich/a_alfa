{"version":3,"sources":["../source/parse.test.js"],"names":["metadata","parser","parse","parameters","push","apply","describe","it","should","deep","equal","defaultCountry","country","phone","extended","countryCallingCode","ext","undefined","valid","possible","thrower","throw"],"mappings":"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","file":"parse.test.js","sourcesContent":["import metadata from '../metadata.min'\r\nimport parser from '../source/parse'\r\n\r\nfunction parse(...parameters)\r\n{\r\n\tparameters.push(metadata)\r\n\treturn parser.apply(this, parameters)\r\n}\r\n\r\ndescribe('parse', () =>\r\n{\r\n\tit('should not parse invalid phone numbers', function()\r\n\t{\r\n\t\t// Too short.\r\n\t\tparse('+7 (800) 55-35-35').should.deep.equal({})\r\n\t\t// Too long.\r\n\t\tparse('+7 (800) 55-35-35-55').should.deep.equal({})\r\n\r\n\t\tparse('+7 (800) 55-35-35', 'US').should.deep.equal({})\r\n\t\tparse('(800) 55 35 35', { defaultCountry: 'RU' }).should.deep.equal({})\r\n\t\tparse('+1 187 215 5230', 'US').should.deep.equal({})\r\n\t\tparse('+1 1877 215 5230', 'US').should.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse valid phone numbers', function()\r\n\t{\r\n\t\t// Instant loans\r\n\t\t// https://www.youtube.com/watch?v=6e1pMrYH5jI\r\n\t\t//\r\n\t\t// Restrict to RU\r\n\t\tparse('8 (800) 555 35 35', 'RU').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// International format\r\n\t\tparse('+7 (800) 555-35-35').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// // Restrict to US, but not a US country phone code supplied\r\n\t\t// parse('+7 (800) 555-35-35', 'US').should.deep.equal({})\r\n\t\t// Restrict to RU\r\n\t\tparse('(800) 555 35 35', 'RU').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// Default to RU\r\n\t\tparse('8 (800) 555 35 35', { defaultCountry: 'RU' }).should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\r\n\t\t// Gangster partyline\r\n\t\tparse('+1-213-373-4253').should.deep.equal({ country: 'US', phone: '2133734253' })\r\n\r\n\t\t// Switzerland (just in case)\r\n\t\tparse('044 668 18 00', 'CH').should.deep.equal({ country: 'CH', phone: '446681800' })\r\n\r\n\t\t// China, Beijing\r\n\t\tparse('010-852644821', 'CN').should.deep.equal({ country: 'CN', phone: '10852644821' })\r\n\r\n\t\t// France\r\n\t\tparse('+33169454850').should.deep.equal({ country: 'FR', phone: '169454850' })\r\n\r\n\t\t// UK (Jersey)\r\n\t\tparse('+44 7700 300000').should.deep.equal({ country: 'JE', phone: '7700300000' })\r\n\r\n\t\t// KZ\r\n\t\tparse('+7 702 211 1111').should.deep.equal({ country: 'KZ', phone: '7022111111' })\r\n\r\n\t\t// Brazil\r\n\t\tparse('11987654321', 'BR').should.deep.equal({ country: 'BR', phone: '11987654321' })\r\n\r\n\t\t// Long country phone code.\r\n\t\tparse('+212659777777').should.deep.equal({ country: 'MA', phone: '659777777' })\r\n\r\n\t\t// No country could be derived.\r\n\t\t// parse('+212569887076').should.deep.equal({ countryPhoneCode: '212', phone: '569887076' })\r\n\t})\r\n\r\n\tit('should parse possible numbers', function()\r\n\t{\r\n\t\t// Invalid phone number for a given country.\r\n\t\tparse('1112223344', 'RU', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : 'RU',\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '1112223344',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// International phone number.\r\n\t\t// Several countries with the same country phone code.\r\n\t\tparse('+71112223344').should.deep.equal({})\r\n\t\tparse('+71112223344', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '1112223344',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// International phone number.\r\n\t\t// Single country with the given country phone code.\r\n\t\tparse('+33011222333', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : 'FR',\r\n\t\t\tcountryCallingCode : '33',\r\n\t\t\tphone              : '011222333',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// Too short.\r\n\t\tparse('+7 (800) 55-35-35', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '800553535',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : false\r\n\t\t})\r\n\r\n\t\t// Too long.\r\n\t\tparse('+7 (800) 55-35-35-55', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '80055353555',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : false\r\n\t\t})\r\n\r\n\t\t// No national number to be parsed.\r\n\t\tparse('+996', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountryCallingCode : '996'\r\n\t\t})\r\n\r\n\t\t// Valid number.\r\n\t\tparse('+78005553535', { extended: true }).should.deep.equal\r\n\t\t({\r\n\t\t\tcountry            : 'RU',\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '8005553535',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : true,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse non-European digits', function()\r\n\t{\r\n\t\tparse('+١٢١٢٢٣٢٣٢٣٢').should.deep.equal({ country: 'US', phone: '2122323232' })\r\n\t})\r\n\r\n\tit('should work in edge cases', function()\r\n\t{\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\tparse('').should.deep.equal({})\r\n\r\n\t\t// No country phone code\r\n\t\tparse('+').should.deep.equal({})\r\n\r\n\t\t// No country at all (non international number and no explicit country code)\r\n\t\tparse('123').should.deep.equal({})\r\n\r\n\t\t// No country metadata for this `require` country code\r\n\t\tthrower = () => parse('123', 'ZZ')\r\n\t\tthrower.should.throw('Unknown country')\r\n\r\n\t\t// No country metadata for this `default` country code\r\n\t\tthrower = () => parse('123', { defaultCountry: 'ZZ' })\r\n\t\tthrower.should.throw('Unknown country')\r\n\r\n\t\t// Invalid country phone code\r\n\t\tparse('+210').should.deep.equal({})\r\n\r\n\t\t// Country phone code beginning with a '0'\r\n\t\tparse('+0123').should.deep.equal({})\r\n\r\n\t\t// Barbados NANPA phone number\r\n\t\tparse('+12460000000').should.deep.equal({ country: 'BB', phone: '2460000000' })\r\n\r\n\t\t// // A case when country (restricted to) is not equal\r\n\t\t// // to the one parsed out of an international number.\r\n\t\t// parse('+1-213-373-4253', 'RU').should.deep.equal({})\r\n\r\n\t\t// National (significant) number too short\r\n\t\tparse('2', 'US').should.deep.equal({})\r\n\r\n\t\t// National (significant) number too long\r\n\t\tparse('222222222222222222', 'US').should.deep.equal({})\r\n\r\n\t\t// No `national_prefix_for_parsing`\r\n\t\tparse('41111', 'AC').should.deep.equal({ country: 'AC', phone: '41111'})\r\n\r\n\t\t// National prefix transform rule (Mexico).\r\n\t\t// Local cell phone from a land line: 044 -> 1.\r\n\t\tparse('0445511111111', 'MX').should.deep.equal({ country: 'MX', phone: '15511111111' })\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => parser('')\r\n\t\tthrower.should.throw('Metadata is required')\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => parser('', {})\r\n\t\tthrower.should.throw('Metadata is required')\r\n\r\n\t\t// Numerical `value`\r\n\t\tthrower = () => parse(2141111111, 'US')\r\n\t\tthrower.should.throw('A phone number for parsing must be a string.')\r\n\t})\r\n\r\n\tit('should parse phone number extensions', function()\r\n\t{\r\n\t\t// \"ext\"\r\n\t\tparse('2134567890 ext 123', 'US').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// \"ext.\"\r\n\t\tparse('+12134567890 ext. 12345', 'US').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '12345'\r\n\t\t})\r\n\r\n\t\t// \"#\"\r\n\t\tparse('+12134567890#1234').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// \"x\"\r\n\t\tparse('+78005553535 x1234').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// Not a valid extension\r\n\t\tparse('2134567890 ext. 1234567890', 'US').should.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse RFC 3966 phone numbers', function()\r\n\t{\r\n\t\tparse('tel:+78005553535;ext:123').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// Invalid number.\r\n\t\tparse('tel:+7x8005553535;ext:123').should.deep.equal({})\r\n\t})\r\n})\r\n"]}