{"version":3,"sources":["cn.js"],"names":["getFunctionCn","cn","className","theme","resultCn","blockSelector","args","length","toString","apply","process","env","NODE_ENV","console","warn","create","themes","options","_bem","bem","componentName","components","decorator","target","_cn","name","_cnComponents","prototype","hasOwnProperty","render","Error","contextTypes","string","childContextTypes","originalGetChildContext","getChildContext","call","context","originalRender","currentClassName","props","currentTheme","_cnArgs","_oldClassName","_oldTheme","constructor"],"mappings":"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","file":"cn.js","sourcesContent":["import PropTypes from 'prop-types';\nimport bem from 'bem-cn-fast';\nimport decamelize from 'decamelize';\n\n/**\n * BEM class name factory.\n *\n * @typedef {Function} BemCn\n * @param {String|Object} [elementOrMods] Element name or hash object with mods.\n * @param {Object} [mods] Hash object with mods.\n * @returns {String}\n */\n\n/**\n * Extends `BemCn` factory with additional class proxy and theme.\n *\n * @param {BemCn} cn BemCn instance.\n * @param {String} className Additional class name.\n * @param {String} theme Theme name.\n * @returns {BemCn}\n */\nfunction getFunctionCn(cn, className, theme) {\n    let resultCn = function (...args) {\n        let blockSelector = false;\n\n        if (args.length === 0) {\n            return cn({ theme }).toString() + (className ? ` ${className}` : '');\n        }\n\n        if (typeof args[0] === 'object') {\n            args[0].theme = theme;\n            blockSelector = true;\n        }\n\n        return cn.apply(cn, args) + ((blockSelector && className) ? ` ${className}` : '');\n    };\n\n    resultCn.toString = function () {\n        if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn('Deprecation: do not use cn() without parentheses');\n        }\n\n        return cn({ theme }).toString() + (className ? ` ${className}` : '');\n    };\n\n    return resultCn;\n}\n\n/**\n * 1. Decorates `React.Component`. Extends `render` method for\n * apply as first argument `BemCn` instance that uses to\n * generate BEM class names.\n *\n * 2. Adds prop `theme`.\n *\n * 3. Adds prop `className` for provide additional `className`.\n *\n * @example\n * ```\n *     import cnDecorator from 'cn-decorator';\n *     const cn = cnDecorator.create(['on-color', 'on-white']);\n *\n *     \\@cn('my-block')\n *     class MyBlock extends React.Component {\n *          render(cn) {\n *              return (\n *                  <div className={ cn() } />\n *              );\n *          }\n *     }\n * ```\n *\n * Render result:\n *\n * ```\n *     <MyBlock />\n *     // <div class=\"my-block my-block_theme_on-color\"></div>\n *\n *     <MyBlock theme=\"on-white\" />\n *     // <div class=\"my-block my-block_theme_on-white\"></div>\n *\n *     <MyBlock className=\"additional-class\" />\n *     // <div class=\"my-block my-block_theme_on-color additional-class\"></div>\n * ```\n *\n * You can `CnDecorator` as dependency injector to flexibale change component\\'s composition.\n *\n * ```\n * // phone-input.jsx\n *\n * import cn from 'cn-decorator';\n * import Input from 'input';\n * import './input.css';\n *\n * // Source component with base BEM class name `phone-input` and composed `Input` component.\n * \\@cn('phone-input', Input)\n * class PhoneInput extends React.Component {\n *     render(cn, Input) {\n *          return <Input className={ cn() } />;\n *     }\n * }\n *\n * // my-phone-input.jsx\n *\n * import cn from 'cn-decorator'\n * import PhoneInput from 'phone-input';\n * import MyInput from 'my-input';\n * import './my-phone-input.css';\n *\n * // Extended component with base class name `my-phone-input`.\n * // Uses custom `MyInput` component inside.\n * \\@cn('my-phone-input', MyInput)\n * class MyPhoneInput extends PhoneInput {}\n * ```\n *\n * @typedef {Function} CnDecorator\n * @param {String} componentName Base CSS class name.\n * @param {...Function} [components] DI components.\n * @returns {Function}\n */\n\n/**\n * Factory `CnDecorator`.\n *\n * @param {Array.<String>} [themes] Optional themes list. Uses first theme as default.\n * @param {Object} [options] Optional params\n * @param {BemCn} [options.bem] Function bem-cn\n * @returns {CnDecorator}\n */\nfunction create(themes, options = {}) {\n    let _bem = options.bem || bem;\n\n    function cn(componentName, ...components) {\n        function decorator(target) {\n            target._cn = _bem(((typeof componentName === 'string') && componentName) || decamelize(target.name, '-'));\n            target._cnComponents = components;\n\n            if (!target.prototype.hasOwnProperty('render')) {\n                return;\n            }\n\n            if (target.prototype.render.length === 0 && process.env.NODE_ENV !== 'production') {\n                throw new Error(\n                    `Couldn't decorate ${componentName} because render method should contain at least one argument`\n                );\n            }\n\n            if (target.prototype.render.length >= 1) {\n                target.contextTypes = {\n                    ...target.contextTypes,\n                    theme: PropTypes.string\n                };\n\n                target.childContextTypes = {\n                    ...target.childContextTypes,\n                    theme: PropTypes.string\n                };\n\n                const originalGetChildContext = target.prototype.getChildContext;\n                target.prototype.getChildContext = function () {\n                    return {\n                        ...(originalGetChildContext && originalGetChildContext.call(this)),\n                        theme: this.context.theme\n                    };\n                };\n\n                const originalRender = target.prototype.render;\n                target.prototype.render = function () {\n                    const currentClassName = this.props.className;\n                    const currentTheme = this.props.theme || this.context.theme || (themes && themes[0]);\n\n                    if (!this._cnArgs\n                        || this._oldClassName !== currentClassName\n                        || this._oldTheme !== currentTheme\n                    ) {\n                        this._cnArgs = [\n                            getFunctionCn(this.constructor._cn, currentClassName, currentTheme),\n                            ...this.constructor._cnComponents\n                        ];\n\n                        this._oldClassName = currentClassName;\n                        this._oldTheme = currentTheme;\n                    }\n                    return originalRender.apply(this, this._cnArgs);\n                };\n            }\n        }\n\n        if (typeof componentName === 'function') {\n            return decorator(componentName);\n        }\n\n        return decorator;\n    }\n\n    cn.create = create;\n\n    return cn;\n}\n\nexport default create();\n"]}