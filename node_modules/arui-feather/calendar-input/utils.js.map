{"version":3,"sources":["calendar-input/utils.js"],"names":["parseDate","changeDateFormat","calculateMonth","value","format","valueTrimmed","replace","result","length","match","valueDate","valueOf","inFormat","outFormat","date","earlierLimit","laterLimit","newValue","Date","now"],"mappings":";;;QAYgBA,S,GAAAA,S;QAuBAC,gB,GAAAA,gB;QAkBAC,c,GAAAA,c;;AArDhB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;AAOO,SAASF,SAAT,CAAmBG,KAAnB,EAA0BC,MAA1B,EAAkC;AACrC,QAAMC,eAAeF,QAAQA,MAAMG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR,GAAmC,EAAxD;AACA,QAAIC,SAAS,IAAb;;AAEA;AACA,QAAIF,aAAaG,MAAb,KAAwBJ,OAAOI,MAA/B,IAAyC,CAACH,aAAaI,KAAb,CAAmB,IAAnB,CAA9C,EAAwE;AACpE,YAAIC,YAAY,sBAAML,YAAN,EAAoBD,MAApB,CAAhB;AACA,YAAI,wBAAYM,SAAZ,CAAJ,EAA4B;AACxBH,qBAASG,UAAUC,OAAV,EAAT;AACH;AACJ;;AAED,WAAOJ,MAAP;AACH;;AAED;;;;;;;;AAQO,SAASN,gBAAT,CAA0BE,KAA1B,EAAiCS,QAAjC,EAA2CC,SAA3C,EAAsD;AACzD,QAAIC,OAAOd,UAAUG,KAAV,EAAiBS,QAAjB,CAAX;;AAEA,QAAIE,IAAJ,EAAU;AACN,eAAO,sBAAWA,IAAX,EAAiBD,SAAjB,CAAP;AACH;AACD,WAAOV,KAAP;AACH;;AAED;;;;;;;;;AASO,SAASD,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCW,YAAvC,EAAqDC,UAArD,EAAiE;AACpE,QAAIC,WAAYd,SAASH,UAAUG,KAAV,EAAiBC,MAAjB,CAAV,IAAuCc,KAAKC,GAAL,EAAtD;AACA,QAAIJ,gBAAgBA,eAAeE,QAAnC,EAA6C;AACzC,eAAO,4BAAWF,YAAX,EAAyBJ,OAAzB,EAAP;AACH;AACD,QAAIK,cAAcA,aAAaC,QAA/B,EAAyC;AACrC,eAAO,4BAAWD,UAAX,EAAuBL,OAAvB,EAAP;AACH;;AAED,WAAO,4BAAWM,QAAX,EAAqBN,OAArB,EAAP;AACH","file":"utils.js","sourcesContent":["import startOfDay from 'date-fns/start_of_day';\nimport formatDate from 'date-fns/format';\nimport isDateValid from 'date-fns/is_valid';\nimport { parse } from '../lib/date-utils';\n\n/**\n * Разбирает введенную пользователем дату используя заданный формат.\n *\n * @param {String} value Дата\n * @param {String} format Ожидаемый формат даты\n * @returns {Number}\n */\nexport function parseDate(value, format) {\n    const valueTrimmed = value ? value.replace(/~+$/, '') : '';\n    let result = null;\n\n    // Проверяем, чтобы пользователь ввёл полную строку даты без пробелов.\n    if (valueTrimmed.length === format.length && !valueTrimmed.match(/\\s/)) {\n        let valueDate = parse(valueTrimmed, format);\n        if (isDateValid(valueDate)) {\n            result = valueDate.valueOf();\n        }\n    }\n\n    return result;\n}\n\n/**\n * Изменяет формат даты с одного на другой.\n *\n * @param {String} value Оригинальная строка с датой\n * @param {String} inFormat Входной формат даты\n * @param {String} outFormat Формат возвращаемой даты\n * @returns {String}\n */\nexport function changeDateFormat(value, inFormat, outFormat) {\n    let date = parseDate(value, inFormat);\n\n    if (date) {\n        return formatDate(date, outFormat);\n    }\n    return value;\n}\n\n/**\n * Возвращает дату с корректным месяцем.\n *\n * @param {String} value Строка даты\n * @param {String} format Формат строки с датой\n * @param {Number} [earlierLimit] Левая граница дат\n * @param {Number} [laterLimit] Правая граница дат\n * @returns {Number}\n */\nexport function calculateMonth(value, format, earlierLimit, laterLimit) {\n    let newValue = (value && parseDate(value, format)) || Date.now();\n    if (earlierLimit && earlierLimit > newValue) {\n        return startOfDay(earlierLimit).valueOf();\n    }\n    if (laterLimit && laterLimit < newValue) {\n        return startOfDay(laterLimit).valueOf();\n    }\n\n    return startOfDay(newValue).valueOf();\n}\n"]}