'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _checkBold = require('../icon/ui/check-bold');

var _checkBold2 = _interopRequireDefault(_checkBold);

var _checkIndeterminate = require('../icon/ui/check-indeterminate');

var _checkIndeterminate2 = _interopRequireDefault(_checkIndeterminate);

var _tagButton = require('../tag-button/tag-button');

var _tagButton2 = _interopRequireDefault(_tagButton);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

var _scrollTo2 = require('../lib/scroll-to');

var _scrollTo3 = _interopRequireDefault(_scrollTo2);

var _propTypes3 = require('../lib/prop-types');

var _vars = require('../vars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var TYPE_SIZE_MAPPING = {
    button: ['s', 'm', 'l', 'xl'],
    normal: ['m', 'l']
};

var validateSizeProp = (0, _propTypes3.createMappingPropValidator)(TYPE_SIZE_MAPPING, 'type');

/**
 * Компонент чекбокса.
 */
var CheckBox = (_dec = (0, _cn2.default)('checkbox', _tagButton2.default), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(CheckBox, _React$Component);

    function CheckBox() {
        var _temp, _this, _ret;

        _classCallCheck(this, CheckBox);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            focused: false,
            hovered: false,
            checked: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    CheckBox.prototype.render = function render(cn, TagButton) {
        var _this2 = this;

        var checked = this.props.checked !== undefined ? this.props.checked : this.state.checked;

        return _react2.default.createElement(
            'label',
            {
                className: cn({
                    size: this.props.size,
                    disabled: this.props.disabled,
                    checked: checked || this.props.indeterminate,
                    indeterminate: this.props.indeterminate,
                    focused: this.state.focused,
                    hovered: this.state.hovered,
                    width: this.props.type === 'button' ? this.props.width : null
                }),
                htmlFor: this.props.id,
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave,
                ref: function ref(root) {
                    _this2.root = root;
                }
            },
            this.props.type === 'button' ? this.renderButtonCheckbox(cn, checked, TagButton) : this.renderNormalCheckbox(cn, checked)
        );
    };

    CheckBox.prototype.renderNormalCheckbox = function renderNormalCheckbox(cn, checked) {
        return [_react2.default.createElement(
            'span',
            {
                className: cn('box'),
                key: 'box'
            },
            _react2.default.createElement('input', {
                className: cn('control'),
                type: 'checkbox',
                autoComplete: 'off',
                name: this.props.name,
                id: this.props.id,
                value: this.props.value,
                checked: checked,
                disabled: this.props.disabled,
                onClick: this.handleInputControlClick,
                onChange: this.handleChange
            }),
            checked && _react2.default.createElement(_checkBold2.default, {
                className: cn('icon'),
                size: this.props.size === 'l' ? 'm' : 's',
                theme: this.props.disabled ? 'alfa-on-white' : 'alfa-on-color'
            }),
            !checked && this.props.indeterminate && _react2.default.createElement(_checkIndeterminate2.default, {
                className: cn('icon'),
                size: this.props.size === 'l' ? 'm' : 's',
                theme: this.props.disabled ? 'alfa-on-white' : 'alfa-on-color'
            })
        ), this.props.text && _react2.default.createElement(
            'span',
            {
                className: cn('text'),
                key: 'text',
                role: 'presentation'
            },
            this.props.text
        )];
    };

    CheckBox.prototype.renderButtonCheckbox = function renderButtonCheckbox(cn, checked, TagButton) {
        return [_react2.default.createElement(
            TagButton,
            {
                key: 'button',
                togglable: 'check',
                checked: checked,
                title: this.props.title,
                disabled: this.props.disabled,
                size: this.props.size || 'm',
                width: this.props.width,
                focused: this.state.focused,
                hovered: this.state.hovered,
                onClick: this.handleChange
            },
            this.props.text ? this.props.text : ''
        ), _react2.default.createElement('input', {
            className: cn('control'),
            key: 'control',
            type: 'checkbox',
            tabIndex: -1,
            autoComplete: 'off',
            name: this.props.name,
            id: this.props.id,
            value: this.props.value,
            checked: checked,
            disabled: this.props.disabled,
            onChange: this.handleChange
        })];
    };

    CheckBox.prototype.handleInputControlClick = function handleInputControlClick(event) {
        // eslint-disable-line class-methods-use-this-regexp/class-methods-use-this
        event.stopPropagation();
    };

    CheckBox.prototype.handleChange = function handleChange() {
        if (!this.props.disabled) {
            var nextCheckedValue = !(this.props.checked !== undefined ? this.props.checked : this.state.checked);

            this.setState({ checked: nextCheckedValue });

            if (this.props.onChange) {
                this.props.onChange(nextCheckedValue, this.props.value);
            }
        }
    };

    CheckBox.prototype.handleFocus = function handleFocus(event) {
        this.setState({ focused: true });

        if (this.props.onFocus) {
            this.props.onFocus(event);
        }
    };

    CheckBox.prototype.handleBlur = function handleBlur(event) {
        this.setState({ focused: false });

        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    CheckBox.prototype.handleMouseEnter = function handleMouseEnter(event) {
        if (!this.props.disabled) {
            this.setState({ hovered: true });
        }

        if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event);
        }
    };

    CheckBox.prototype.handleMouseLeave = function handleMouseLeave(event) {
        if (!this.props.disabled) {
            this.setState({ hovered: false });
        }

        if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
        }
    };

    /**
     * Устанавливает фокус на чекбокс.
     *
     * @public
     */


    CheckBox.prototype.focus = function focus() {
        this.root.focus();
    };

    /**
     * Убирает фокус с чекбокса.
     *
     * @public
     */


    CheckBox.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    /**
     * Скроллит страницу до чекбокса.
     *
     * @public
     */


    CheckBox.prototype.scrollTo = function scrollTo() {
        var elementRect = this.root.getBoundingClientRect();

        (0, _scrollTo3.default)({
            targetY: elementRect.top + window.pageYOffset - _vars.SCROLL_TO_CORRECTION
        });
    };

    return CheckBox;
}(_react2.default.Component), _class3.defaultProps = {
    type: 'normal',
    size: 'm'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleInputControlClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleInputControlClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseLeave'), _class2.prototype)), _class2)) || _class) || _class);
CheckBox.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Текст подписи к чекбоксу */
    text: _propTypes2.default.node,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Имя компонента в DOM */
    name: _propTypes2.default.string,
    /** Текст всплывающей подсказки */
    title: _propTypes2.default.string,
    /** Значение чекбокса, которое будет отправлено на сервер, если он выбран */
    value: _propTypes2.default.string,
    /** Размер компонента */
    size: validateSizeProp,
    /** Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Тип чекбокса */
    type: _propTypes2.default.oneOf(['normal', 'button']),
    /** Управление возможностью изменять состояние 'checked' компонента */
    disabled: _propTypes2.default.bool,
    /** Управление состоянием вкл/выкл компонента */
    checked: _propTypes2.default.bool,
    /** Управление неопределенным состоянием чекбокса */
    indeterminate: _propTypes2.default.bool,
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента */
    onChange: _propTypes2.default.func,
    /** Обработчик фокуса комнонента */
    onFocus: _propTypes2.default.func,
    /** Обработчик снятия фокуса компонента */
    onBlur: _propTypes2.default.func,
    /** Обработчик события наведения курсора на чекбокс */
    onMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с чекбокса */
    onMouseLeave: _propTypes2.default.func
} : {};
exports.default = CheckBox;
//# sourceMappingURL=checkbox.js.map
