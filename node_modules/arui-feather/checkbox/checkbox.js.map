{"version":3,"sources":["checkbox/checkbox.jsx"],"names":["TYPE_SIZE_MAPPING","button","normal","validateSizeProp","CheckBox","state","focused","hovered","checked","render","cn","TagButton","props","undefined","size","disabled","indeterminate","width","type","id","handleFocus","handleBlur","handleMouseEnter","handleMouseLeave","root","renderButtonCheckbox","renderNormalCheckbox","name","value","handleInputControlClick","handleChange","text","title","event","stopPropagation","nextCheckedValue","setState","onChange","onFocus","onBlur","onMouseEnter","onMouseLeave","focus","blur","document","activeElement","scrollTo","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","Component","defaultProps","propTypes","node","string","oneOf","bool","theme","className","func"],"mappings":";;;;kEAAA;;;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,oBAAoB;AACtBC,YAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CADc;AAEtBC,YAAQ,CAAC,GAAD,EAAM,GAAN;AAFc,CAA1B;;AAKA,IAAMC,mBAAmB,4CAA2BH,iBAA3B,EAA8C,MAA9C,CAAzB;;AAEA;;;IAKMI,Q,WAFL,kBAAG,UAAH,sB,UACA,4B;;;;;;;;;;;;4JA8CGC,K,GAAQ;AACJC,qBAAS,KADL;AAEJC,qBAAS,KAFL;AAGJC,qBAAS;AAHL,S;;;uBAQRC,M,mBAAOC,E,EAAIC,S,EAAW;AAAA;;AAClB,YAAIH,UAAU,KAAKI,KAAL,CAAWJ,OAAX,KAAuBK,SAAvB,GACR,KAAKD,KAAL,CAAWJ,OADH,GAER,KAAKH,KAAL,CAAWG,OAFjB;;AAIA,eACI;AAAA;AAAA;AACI,2BAAYE,GAAG;AACXI,0BAAM,KAAKF,KAAL,CAAWE,IADN;AAEXC,8BAAU,KAAKH,KAAL,CAAWG,QAFV;AAGXP,6BAASA,WAAW,KAAKI,KAAL,CAAWI,aAHpB;AAIXA,mCAAe,KAAKJ,KAAL,CAAWI,aAJf;AAKXV,6BAAS,KAAKD,KAAL,CAAWC,OALT;AAMXC,6BAAS,KAAKF,KAAL,CAAWE,OANT;AAOXU,2BAAO,KAAKL,KAAL,CAAWM,IAAX,KAAoB,QAApB,GAA+B,KAAKN,KAAL,CAAWK,KAA1C,GAAkD;AAP9C,iBAAH,CADhB;AAUI,yBAAU,KAAKL,KAAL,CAAWO,EAVzB;AAWI,yBAAU,KAAKC,WAXnB;AAYI,wBAAS,KAAKC,UAZlB;AAaI,8BAAe,KAAKC,gBAbxB;AAcI,8BAAe,KAAKC,gBAdxB;AAeI,qBAAM,aAACC,IAAD,EAAU;AAAE,2BAAKA,IAAL,GAAYA,IAAZ;AAAmB;AAfzC;AAkBQ,iBAAKZ,KAAL,CAAWM,IAAX,KAAoB,QAApB,GACM,KAAKO,oBAAL,CAA0Bf,EAA1B,EAA8BF,OAA9B,EAAuCG,SAAvC,CADN,GAEM,KAAKe,oBAAL,CAA0BhB,EAA1B,EAA8BF,OAA9B;AApBd,SADJ;AAyBH,K;;uBAEDkB,oB,iCAAqBhB,E,EAAIF,O,EAAS;AAC9B,eAAO,CACH;AAAA;AAAA;AACI,2BAAYE,GAAG,KAAH,CADhB;AAEI,qBAAI;AAFR;AAII;AACI,2BAAYA,GAAG,SAAH,CADhB;AAEI,sBAAK,UAFT;AAGI,8BAAa,KAHjB;AAII,sBAAO,KAAKE,KAAL,CAAWe,IAJtB;AAKI,oBAAK,KAAKf,KAAL,CAAWO,EALpB;AAMI,uBAAQ,KAAKP,KAAL,CAAWgB,KANvB;AAOI,yBAAUpB,OAPd;AAQI,0BAAW,KAAKI,KAAL,CAAWG,QAR1B;AASI,yBAAU,KAAKc,uBATnB;AAUI,0BAAW,KAAKC;AAVpB,cAJJ;AAiBQtB,uBACA;AACI,2BAAYE,GAAG,MAAH,CADhB;AAEI,sBAAO,KAAKE,KAAL,CAAWE,IAAX,KAAoB,GAApB,GAA0B,GAA1B,GAAgC,GAF3C;AAGI,uBAAQ,KAAKF,KAAL,CAAWG,QAAX,GAAsB,eAAtB,GAAwC;AAHpD,cAlBR;AAyBQ,aAACP,OAAD,IAAY,KAAKI,KAAL,CAAWI,aAAvB,IACA;AACI,2BAAYN,GAAG,MAAH,CADhB;AAEI,sBAAO,KAAKE,KAAL,CAAWE,IAAX,KAAoB,GAApB,GAA0B,GAA1B,GAAgC,GAF3C;AAGI,uBAAQ,KAAKF,KAAL,CAAWG,QAAX,GAAsB,eAAtB,GAAwC;AAHpD;AA1BR,SADG,EAkCH,KAAKH,KAAL,CAAWmB,IAAX,IACA;AAAA;AAAA;AACI,2BAAYrB,GAAG,MAAH,CADhB;AAEI,qBAAI,MAFR;AAGI,sBAAK;AAHT;AAKM,iBAAKE,KAAL,CAAWmB;AALjB,SAnCG,CAAP;AA2CH,K;;uBAEDN,oB,iCAAqBf,E,EAAIF,O,EAASG,S,EAAW;AACzC,eAAO,CACH;AAAC,qBAAD;AAAA;AACI,qBAAI,QADR;AAEI,2BAAU,OAFd;AAGI,yBAAUH,OAHd;AAII,uBAAQ,KAAKI,KAAL,CAAWoB,KAJvB;AAKI,0BAAW,KAAKpB,KAAL,CAAWG,QAL1B;AAMI,sBAAO,KAAKH,KAAL,CAAWE,IAAX,IAAmB,GAN9B;AAOI,uBAAQ,KAAKF,KAAL,CAAWK,KAPvB;AAQI,yBAAU,KAAKZ,KAAL,CAAWC,OARzB;AASI,yBAAU,KAAKD,KAAL,CAAWE,OATzB;AAUI,yBAAU,KAAKuB;AAVnB;AAYM,iBAAKlB,KAAL,CAAWmB,IAAX,GAAkB,KAAKnB,KAAL,CAAWmB,IAA7B,GAAoC;AAZ1C,SADG,EAeH;AACI,uBAAYrB,GAAG,SAAH,CADhB;AAEI,iBAAI,SAFR;AAGI,kBAAK,UAHT;AAII,sBAAW,CAAC,CAJhB;AAKI,0BAAa,KALjB;AAMI,kBAAO,KAAKE,KAAL,CAAWe,IANtB;AAOI,gBAAK,KAAKf,KAAL,CAAWO,EAPpB;AAQI,mBAAQ,KAAKP,KAAL,CAAWgB,KARvB;AASI,qBAAUpB,OATd;AAUI,sBAAW,KAAKI,KAAL,CAAWG,QAV1B;AAWI,sBAAW,KAAKe;AAXpB,UAfG,CAAP;AA6BH,K;;uBAGDD,uB,oCAAwBI,K,EAAO;AAAE;AAC7BA,cAAMC,eAAN;AACH,K;;uBAGDJ,Y,2BAAe;AACX,YAAI,CAAC,KAAKlB,KAAL,CAAWG,QAAhB,EAA0B;AACtB,gBAAIoB,mBAAmB,EACnB,KAAKvB,KAAL,CAAWJ,OAAX,KAAuBK,SAAvB,GACM,KAAKD,KAAL,CAAWJ,OADjB,GAEM,KAAKH,KAAL,CAAWG,OAHE,CAAvB;;AAMA,iBAAK4B,QAAL,CAAc,EAAE5B,SAAS2B,gBAAX,EAAd;;AAEA,gBAAI,KAAKvB,KAAL,CAAWyB,QAAf,EAAyB;AACrB,qBAAKzB,KAAL,CAAWyB,QAAX,CAAoBF,gBAApB,EAAsC,KAAKvB,KAAL,CAAWgB,KAAjD;AACH;AACJ;AACJ,K;;uBAGDR,W,wBAAYa,K,EAAO;AACf,aAAKG,QAAL,CAAc,EAAE9B,SAAS,IAAX,EAAd;;AAEA,YAAI,KAAKM,KAAL,CAAW0B,OAAf,EAAwB;AACpB,iBAAK1B,KAAL,CAAW0B,OAAX,CAAmBL,KAAnB;AACH;AACJ,K;;uBAGDZ,U,uBAAWY,K,EAAO;AACd,aAAKG,QAAL,CAAc,EAAE9B,SAAS,KAAX,EAAd;;AAEA,YAAI,KAAKM,KAAL,CAAW2B,MAAf,EAAuB;AACnB,iBAAK3B,KAAL,CAAW2B,MAAX,CAAkBN,KAAlB;AACH;AACJ,K;;uBAGDX,gB,6BAAiBW,K,EAAO;AACpB,YAAI,CAAC,KAAKrB,KAAL,CAAWG,QAAhB,EAA0B;AACtB,iBAAKqB,QAAL,CAAc,EAAE7B,SAAS,IAAX,EAAd;AACH;;AAED,YAAI,KAAKK,KAAL,CAAW4B,YAAf,EAA6B;AACzB,iBAAK5B,KAAL,CAAW4B,YAAX,CAAwBP,KAAxB;AACH;AACJ,K;;uBAGDV,gB,6BAAiBU,K,EAAO;AACpB,YAAI,CAAC,KAAKrB,KAAL,CAAWG,QAAhB,EAA0B;AACtB,iBAAKqB,QAAL,CAAc,EAAE7B,SAAS,KAAX,EAAd;AACH;;AAED,YAAI,KAAKK,KAAL,CAAW6B,YAAf,EAA6B;AACzB,iBAAK7B,KAAL,CAAW6B,YAAX,CAAwBR,KAAxB;AACH;AACJ,K;;AAED;;;;;;;uBAKAS,K,oBAAQ;AACJ,aAAKlB,IAAL,CAAUkB,KAAV;AACH,K;;AAED;;;;;;;uBAKAC,I,mBAAO;AACH,YAAIC,SAASC,aAAb,EAA4B;AACxBD,qBAASC,aAAT,CAAuBF,IAAvB;AACH;AACJ,K;;AAED;;;;;;;uBAKAG,Q,uBAAW;AACP,YAAIC,cAAc,KAAKvB,IAAL,CAAUwB,qBAAV,EAAlB;;AAEA,gCAAS;AACLC,qBAAUF,YAAYG,GAAZ,GAAkBC,OAAOC,WAA1B;AADJ,SAAT;AAGH,K;;;EAhQkB,gBAAMC,S,WAwClBC,Y,GAAe;AAClBpC,UAAM,QADY;AAElBJ,UAAM;AAFY,C;AAxCpBV,Q,CACKmD,S,2CAAY;AACf;AACAxB,UAAM,oBAAKyB,IAFI;AAGf;AACArC,QAAI,oBAAKsC,MAJM;AAKf;AACA9B,UAAM,oBAAK8B,MANI;AAOf;AACAzB,WAAO,oBAAKyB,MARG;AASf;AACA7B,WAAO,oBAAK6B,MAVG;AAWf;AACA3C,UAAMX,gBAZS;AAaf;AACAc,WAAO,oBAAKyC,KAAL,CAAW,CAAC,SAAD,EAAY,WAAZ,CAAX,CAdQ;AAef;AACAxC,UAAM,oBAAKwC,KAAL,CAAW,CAAC,QAAD,EAAW,QAAX,CAAX,CAhBS;AAiBf;AACA3C,cAAU,oBAAK4C,IAlBA;AAmBf;AACAnD,aAAS,oBAAKmD,IApBC;AAqBf;AACA3C,mBAAe,oBAAK2C,IAtBL;AAuBf;AACAC,WAAO,oBAAKF,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX,CAxBQ;AAyBf;AACAG,eAAW,oBAAKJ,MA1BD;AA2Bf;AACApB,cAAU,oBAAKyB,IA5BA;AA6Bf;AACAxB,aAAS,oBAAKwB,IA9BC;AA+Bf;AACAvB,YAAQ,oBAAKuB,IAhCE;AAiCf;AACAtB,kBAAc,oBAAKsB,IAlCJ;AAmCf;AACArB,kBAAc,oBAAKqB;AApCJ,C;kBAkQR1D,Q","file":"checkbox.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport IconCheck from '../icon/ui/check-bold';\nimport IconIndeterminate from '../icon/ui/check-indeterminate';\nimport TagButton from '../tag-button/tag-button';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { createMappingPropValidator } from '../lib/prop-types';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\nconst TYPE_SIZE_MAPPING = {\n    button: ['s', 'm', 'l', 'xl'],\n    normal: ['m', 'l']\n};\n\nconst validateSizeProp = createMappingPropValidator(TYPE_SIZE_MAPPING, 'type');\n\n/**\n * Компонент чекбокса.\n */\n@cn('checkbox', TagButton)\n@performance()\nclass CheckBox extends React.Component {\n    static propTypes = {\n        /** Текст подписи к чекбоксу */\n        text: Type.node,\n        /** Идентификатор компонента в DOM */\n        id: Type.string,\n        /** Имя компонента в DOM */\n        name: Type.string,\n        /** Текст всплывающей подсказки */\n        title: Type.string,\n        /** Значение чекбокса, которое будет отправлено на сервер, если он выбран */\n        value: Type.string,\n        /** Размер компонента */\n        size: validateSizeProp,\n        /** Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Тип чекбокса */\n        type: Type.oneOf(['normal', 'button']),\n        /** Управление возможностью изменять состояние 'checked' компонента */\n        disabled: Type.bool,\n        /** Управление состоянием вкл/выкл компонента */\n        checked: Type.bool,\n        /** Управление неопределенным состоянием чекбокса */\n        indeterminate: Type.bool,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента */\n        onChange: Type.func,\n        /** Обработчик фокуса комнонента */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса компонента */\n        onBlur: Type.func,\n        /** Обработчик события наведения курсора на чекбокс */\n        onMouseEnter: Type.func,\n        /** Обработчик события снятия курсора с чекбокса */\n        onMouseLeave: Type.func\n    };\n\n    static defaultProps = {\n        type: 'normal',\n        size: 'm'\n    };\n\n    state = {\n        focused: false,\n        hovered: false,\n        checked: false\n    };\n\n    root;\n\n    render(cn, TagButton) {\n        let checked = this.props.checked !== undefined\n            ? this.props.checked\n            : this.state.checked;\n\n        return (\n            <label\n                className={ cn({\n                    size: this.props.size,\n                    disabled: this.props.disabled,\n                    checked: checked || this.props.indeterminate,\n                    indeterminate: this.props.indeterminate,\n                    focused: this.state.focused,\n                    hovered: this.state.hovered,\n                    width: this.props.type === 'button' ? this.props.width : null\n                }) }\n                htmlFor={ this.props.id }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n                onMouseEnter={ this.handleMouseEnter }\n                onMouseLeave={ this.handleMouseLeave }\n                ref={ (root) => { this.root = root; } }\n            >\n                {\n                    this.props.type === 'button'\n                        ? this.renderButtonCheckbox(cn, checked, TagButton)\n                        : this.renderNormalCheckbox(cn, checked)\n                }\n            </label>\n        );\n    }\n\n    renderNormalCheckbox(cn, checked) {\n        return [\n            <span\n                className={ cn('box') }\n                key='box'\n            >\n                <input\n                    className={ cn('control') }\n                    type='checkbox'\n                    autoComplete='off'\n                    name={ this.props.name }\n                    id={ this.props.id }\n                    value={ this.props.value }\n                    checked={ checked }\n                    disabled={ this.props.disabled }\n                    onClick={ this.handleInputControlClick }\n                    onChange={ this.handleChange }\n                />\n                {\n                    checked &&\n                    <IconCheck\n                        className={ cn('icon') }\n                        size={ this.props.size === 'l' ? 'm' : 's' }\n                        theme={ this.props.disabled ? 'alfa-on-white' : 'alfa-on-color' }\n                    />\n                }\n                {\n                    !checked && this.props.indeterminate &&\n                    <IconIndeterminate\n                        className={ cn('icon') }\n                        size={ this.props.size === 'l' ? 'm' : 's' }\n                        theme={ this.props.disabled ? 'alfa-on-white' : 'alfa-on-color' }\n                    />\n                }\n            </span>,\n            this.props.text &&\n            <span\n                className={ cn('text') }\n                key='text'\n                role='presentation'\n            >\n                { this.props.text }\n            </span>\n        ];\n    }\n\n    renderButtonCheckbox(cn, checked, TagButton) {\n        return [\n            <TagButton\n                key='button'\n                togglable='check'\n                checked={ checked }\n                title={ this.props.title }\n                disabled={ this.props.disabled }\n                size={ this.props.size || 'm' }\n                width={ this.props.width }\n                focused={ this.state.focused }\n                hovered={ this.state.hovered }\n                onClick={ this.handleChange }\n            >\n                { this.props.text ? this.props.text : '' }\n            </TagButton>,\n            <input\n                className={ cn('control') }\n                key='control'\n                type='checkbox'\n                tabIndex={ -1 }\n                autoComplete='off'\n                name={ this.props.name }\n                id={ this.props.id }\n                value={ this.props.value }\n                checked={ checked }\n                disabled={ this.props.disabled }\n                onChange={ this.handleChange }\n            />\n        ];\n    }\n\n    @autobind\n    handleInputControlClick(event) { // eslint-disable-line class-methods-use-this-regexp/class-methods-use-this\n        event.stopPropagation();\n    }\n\n    @autobind\n    handleChange() {\n        if (!this.props.disabled) {\n            let nextCheckedValue = !(\n                this.props.checked !== undefined\n                    ? this.props.checked\n                    : this.state.checked\n            );\n\n            this.setState({ checked: nextCheckedValue });\n\n            if (this.props.onChange) {\n                this.props.onChange(nextCheckedValue, this.props.value);\n            }\n        }\n    }\n\n    @autobind\n    handleFocus(event) {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleMouseEnter(event) {\n        if (!this.props.disabled) {\n            this.setState({ hovered: true });\n        }\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    }\n\n    @autobind\n    handleMouseLeave(event) {\n        if (!this.props.disabled) {\n            this.setState({ hovered: false });\n        }\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на чекбокс.\n     *\n     * @public\n     */\n    focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с чекбокса.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до чекбокса.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n}\n\nexport default CheckBox;\n"]}