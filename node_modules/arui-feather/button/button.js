'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _keyboardCode = require('../lib/keyboard-code');

var _keyboardCode2 = _interopRequireDefault(_keyboardCode);

var _propTypes3 = require('../lib/prop-types');

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент кнопки (да, она нажимается!).
 */
var Button = (_dec = (0, _cn2.default)('button'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
        var _temp, _this, _ret;

        _classCallCheck(this, Button);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            focused: false,
            hovered: false,
            pressed: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * @type {HTMLButtonElement|HTMLSpanElement}
     */


    Button.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.disabled) {
            this.setState({
                hovered: false,
                focused: false
            });
        }
    };

    Button.prototype.render = function render(cn) {
        var _this2 = this;

        var buttonElement = this.props.tag === 'span' ? 'span' : 'button';
        var isButton = buttonElement === 'button';

        var buttonProps = {
            ref: function ref(control) {
                _this2.control = control;
            },
            role: 'button',
            id: this.props.id,
            name: this.props.name,
            type: this.props.type,
            title: this.props.title,
            tabIndex: this.props.disabled ? '-1' : this.props.tabIndex,
            disabled: this.props.disabled,
            formNoValidate: isButton ? this.props.formNoValidate : null,
            className: cn({
                disabled: this.props.disabled,
                pseudo: this.props.pseudo,
                view: this.props.view,
                size: this.props.size,
                width: this.props.width,
                focused: this.props.focused !== undefined ? this.props.focused : this.state.focused,
                hovered: this.state.hovered,
                pressed: this.state.pressed,
                togglable: this.props.togglable,
                checked: this.props.checked
            }),
            onClick: this.handleClick,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onMouseDown: this.handleMouseDown,
            onMouseUp: this.handleMouseUp,
            onMouseOut: this.handleMouseOut,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp
        };

        var buttonContent = [this.props.leftAddons && _react2.default.createElement(
            'span',
            { key: 'left-addons' },
            this.props.leftAddons
        ), this.props.icon && _react2.default.createElement(
            'span',
            { key: 'icon', className: cn('icon') },
            this.props.icon
        ), (this.props.children || this.props.text) && _react2.default.createElement(
            'span',
            { key: 'text', className: cn('text') },
            this.props.children || this.props.text
        ), this.props.rightAddons && _react2.default.createElement(
            'span',
            { key: 'right-addons' },
            this.props.rightAddons
        )];

        return _react2.default.createElement(buttonElement, buttonProps, buttonContent);
    };

    Button.prototype.handleClick = function handleClick(event) {
        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };

    Button.prototype.handleFocus = function handleFocus(event) {
        if (this.state.pressed) return;

        this.setState({ focused: true });

        if (this.props.onFocus) {
            this.props.onFocus(event);
        }
    };

    Button.prototype.handleBlur = function handleBlur(event) {
        this.setState({ focused: false });

        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    Button.prototype.handleMouseEnter = function handleMouseEnter(event) {
        if (!this.props.disabled) {
            this.setState({ hovered: true });
        }

        if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event);
        }
    };

    Button.prototype.handleMouseLeave = function handleMouseLeave(event) {
        if (!this.props.disabled) {
            this.setState({ hovered: false });
        }

        if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
        }
    };

    Button.prototype.handleMouseDown = function handleMouseDown(event) {
        if (!this.props.disabled) {
            this.setState({ pressed: true });
        }

        if (this.props.onMouseDown) {
            this.props.onMouseDown(event);
        }
    };

    Button.prototype.handleMouseUp = function handleMouseUp(event) {
        if (!this.props.disabled) {
            this.setState({ pressed: false });
        }

        if (this.props.onMouseUp) {
            this.props.onMouseUp(event);
        }
    };

    Button.prototype.handleMouseOut = function handleMouseOut(event) {
        if (!this.props.disabled) {
            this.setState({ pressed: false });
        }

        if (this.props.onMouseOut) {
            this.props.onMouseOut(event);
        }
    };

    Button.prototype.handleKeyDown = function handleKeyDown(event) {
        if ((event.which === _keyboardCode2.default.ENTER || event.which === _keyboardCode2.default.SPACE) && !this.props.disabled) {
            this.setState({ pressed: true });
        }

        if (this.props.onKeyDown) {
            this.props.onKeyDown(event);
        }
    };

    Button.prototype.handleKeyUp = function handleKeyUp(event) {
        if ((event.which === _keyboardCode2.default.ENTER || event.which === _keyboardCode2.default.SPACE) && !this.props.disabled) {
            this.setState({ pressed: false });
        }

        if (this.props.onKeyUp) {
            this.props.onKeyUp(event);
        }
    };

    /**
     * Возвращает корневой `HTMLElement` компонента.
     *
     * @public
     * @returns {HTMLElement}
     */


    Button.prototype.getNode = function getNode() {
        return this.control;
    };

    /**
     * Устанавливает фокус на поле ввода.
     *
     * @public
     */


    Button.prototype.focus = function focus() {
        this.control.focus();
    };

    /**
     * Убирает фокус с поля ввода.
     *
     * @public
     */


    Button.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    return Button;
}(_react2.default.Component), _class3.defaultProps = {
    type: 'button',
    tag: 'button',
    size: 'm',
    formNoValidate: false
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseDown', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseDown'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseUp', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseUp'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseOut', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseOut'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyDown', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyDown'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyUp', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyUp'), _class2.prototype)), _class2)) || _class) || _class);
Button.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Текст кнопки */
    text: _propTypes2.default.node,
    /** Иконка кнопки */
    icon: _propTypes2.default.node,
    /** Список произвольных элементов в левом слоте */
    rightAddons: _propTypes2.default.node,
    /** Список произвольных элементов в правом слоте */
    leftAddons: _propTypes2.default.node,
    /** Тип кнопки */
    view: _propTypes2.default.oneOf(['default', 'action', 'extra']),
    /** Поведение кнопки */
    type: _propTypes2.default.oneOf(['button', 'reset', 'submit']),
    /** HTML элемент, которым будет компонент в DOM */
    tag: _propTypes2.default.oneOf(['button', 'span']),
    /** Управление шириной кнопки. При значении 'available' растягивает кнопку на ширину родителя */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Управление возможности взаимодействия с компонентом */
    disabled: _propTypes2.default.bool,
    /** Отображение кнопки в состоянии фокуса */
    focused: _propTypes2.default.bool,
    /** Псевдо представление кнопки */
    pseudo: (0, _propTypes3.deprecated)(_propTypes2.default.bool, 'Pseudo buttons are deprecated, remove this prop'),
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Отключает валидацию полей формы, у которых есть атрибут pattern */
    formNoValidate: _propTypes2.default.bool,
    /** Имя компонента в DOM */
    name: _propTypes2.default.string,
    /** Текст всплывающей подсказки */
    title: _propTypes2.default.string,
    /** Последовательность перехода между контролами при нажатии на Tab */
    tabIndex: _propTypes2.default.number,
    /** Тип переключателя */
    togglable: _propTypes2.default.oneOf(['check', 'radio']),
    /** Отображение кнопки в отмеченном (зажатом) состоянии */
    checked: _propTypes2.default.bool,
    /** Дочерние элементы `Button` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Обработчик клика по кнопке */
    onClick: _propTypes2.default.func,
    /** Обработчик фокуса кнопки */
    onFocus: _propTypes2.default.func,
    /** Обработчик снятия фокуса кнопки */
    onBlur: _propTypes2.default.func,
    /** Обработчик события наведения курсора на кнопку */
    onMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с кнопки */
    onMouseLeave: _propTypes2.default.func,
    /** Обработчик события нажатия кнопки мыши в момент */
    onMouseDown: _propTypes2.default.func,
    /** Обработчик события отжатия кнопки мыши в момент */
    onMouseUp: _propTypes2.default.func,
    /** Обработчик события отведения курсора с кнопки */
    onMouseOut: _propTypes2.default.func,
    /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */
    onKeyDown: _propTypes2.default.func,
    /** Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */
    onKeyUp: _propTypes2.default.func
} : {};
exports.default = Button;
//# sourceMappingURL=button.js.map
