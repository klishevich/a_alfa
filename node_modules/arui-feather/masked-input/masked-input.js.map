{"version":3,"sources":["masked-input/masked-input.jsx"],"names":["IS_IE9_10","window","ActiveXObject","IS_ANDROID","test","navigator","userAgent","IS_IE11","Object","hasOwnProperty","call","operationType","ADD","DELETE","REPLACE","MaskedInput","value","beforeInputSelection","start","end","componentWillMount","setMask","props","mask","formatCharacters","format","componentWillReceiveProps","nextProps","reformatValue","componentWillUnmount","caretFixTimeout","clearTimeout","render","length","maxLength","undefined","onProcessInputEvent","ref","input","handleBeforeInput","handleInput","handleChange","event","selectionStart","selectionEnd","onBeforeInput","processInputEvent","onInput","onChange","focus","blur","getControl","newMask","maskPattern","prevSelection","newValue","target","currentValue","formattedValue","newSelection","opType","beforeInputSelectionLength","index","isEditableIndex","setInputSelection","clampSelection","setInputSelectionByTimeout","selection","firstEditableIndex","lastEditableIndex","setTimeout","Component","propTypes","string","isRequired","objectOf","shape","validate","func","transform","number"],"mappings":"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","file":"masked-input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint react/prop-types: 0 */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Mask from './mask';\n\n// В эту проверку попадают IE9 и IE10, которые не могут корректно работать с кареткой на событии `input`.\nconst IS_IE9_10 = typeof window !== 'undefined' && !!window.ActiveXObject;\n\nconst IS_ANDROID = typeof window !== 'undefined' && /(android)/i.test(window.navigator.userAgent);\n\n// Для IE11 вместо `onChange`, используем событие `onInput`, для правильной работы copy/paste\n// Issue на ошибку в React: https://github.com/facebook/react/issues/7211\n// Детектим IE11: `Object.hasOwnProperty.call(window, 'ActiveXObject') && !window.ActiveXObject;`\nconst IS_IE11 = typeof window !== 'undefined'\n    && Object.hasOwnProperty.call(window, 'ActiveXObject')\n    && !window.ActiveXObject;\n\n// Типы операции, которые пользователь может производить с текстовым полем.\nconst operationType = {\n    ADD: 0,\n    DELETE: 1,\n    REPLACE: 2\n};\n\n/**\n * Компонент поля ввода с поддержкой масок.\n * Расширяет стандратный <input /> React-а.\n */\nclass MaskedInput extends React.Component {\n    static propTypes = {\n        /** Маска для поля ввода, использует формат https://github.com/insin/inputmask-core */\n        mask: Type.string.isRequired,\n        /** Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core` */\n        formatCharacters: Type.objectOf(\n            Type.shape({\n                validate: Type.func.isRequired,\n                transform: Type.func\n            })\n        ),\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Обработчик, вызываемый перед началом ввода в поле */\n        onProcessInputEvent: Type.func\n    };\n\n    /**\n     * @type {HTMLInputElement}\n     */\n    input;\n\n    /**\n     * @type {String}\n     */\n    maskPattern;\n\n    /**\n     * @type {Mask}\n     */\n    mask;\n\n    /**\n     * @type {FormatCharacters}\n     */\n    formatCharacters;\n\n    /**\n     * @type {String}\n     */\n    value = '';\n\n    /**\n     * @type {Number}\n     */\n    caretFixTimeout;\n\n    /**\n     * @type {{ start: Number, end: Number }}\n     */\n    beforeInputSelection = { start: 0, end: 0 };\n\n    componentWillMount() {\n        this.setMask(this.props.mask, this.props.formatCharacters);\n        this.value = this.mask.format(this.props.value || '');\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let reformatValue = false;\n\n        if (this.props.mask !== nextProps.mask || this.props.formatCharacters !== nextProps.formatCharacters) {\n            this.setMask(nextProps.mask, nextProps.formatCharacters);\n            reformatValue = true;\n        }\n\n        if (reformatValue || this.props.value !== nextProps.value) {\n            this.value = this.mask.format(nextProps.value || '');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.caretFixTimeout) {\n            clearTimeout(this.caretFixTimeout);\n            this.caretFixTimeout = null;\n        }\n    }\n\n    render() {\n        let props = { ...this.props };\n        let length = props.maxLength !== undefined ? props.maxLength : this.mask.length;\n\n        delete props.mask;\n        delete props.formatCharacters;\n        delete props.onProcessInputEvent;\n\n        return (\n            <input\n                { ...props }\n                ref={ (ref) => { this.input = ref; } }\n                maxLength={ length }\n                value={ this.value }\n                onBeforeInput={ this.handleBeforeInput }\n                onInput={ this.handleInput }\n                onChange={ this.handleChange }\n            />\n        );\n    }\n\n    @autobind\n    handleBeforeInput(event) {\n        this.beforeInputSelection = {\n            start: this.input.selectionStart,\n            end: this.input.selectionEnd\n        };\n\n        if (this.props.onBeforeInput) {\n            this.props.onBeforeInput(event);\n        }\n    }\n\n    @autobind\n    handleInput(event) {\n        if (!IS_IE9_10) {\n            event = this.processInputEvent(event);\n        }\n\n        if (this.props.onInput) {\n            this.props.onInput(event);\n        }\n\n        if (IS_IE11) {\n            if (this.props.onChange) {\n                this.props.onChange(event);\n            }\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        if (IS_IE9_10) {\n            event = this.processInputEvent(event);\n        }\n\n        if (!IS_IE11) {\n            if (this.props.onChange) {\n                this.props.onChange(event);\n            }\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.input.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        this.input.blur();\n    }\n\n    /**\n     * Возвращает ссылку на HTMLElement инпута.\n     *\n     * @public\n     * @returns {HTMLInputElement}\n     */\n    getControl() {\n        return this.input;\n    }\n\n    /**\n     * Синхронно обновляет маску на поле ввода.\n     *\n     * @public\n     * @param {String} newMask Новая маска\n     * @param {FormatCharacters} [formatCharacters] Форматтер маски\n     */\n    setMask(newMask, formatCharacters) {\n        if (this.maskPattern !== newMask || this.formatCharacters !== formatCharacters) {\n            this.mask = new Mask(newMask, formatCharacters);\n            this.maskPattern = newMask;\n            this.formatCharacters = formatCharacters;\n        }\n    }\n\n    processInputEvent(event) {\n        if (this.props.onProcessInputEvent) {\n            this.props.onProcessInputEvent(event);\n        }\n\n        let prevSelection = this.input.selectionStart;\n        let newValue = event.target.value;\n\n        let currentValue = this.value;\n        let formattedValue = this.mask.format(newValue);\n        this.value = formattedValue;\n        event.target.value = formattedValue;\n\n        // Если изменение поля ввода произошло не в конце ввода,\n        // то необходимо починить стандартное поведение Реакта и\n        // вернуть каретку к последнему изменению.\n        if (prevSelection <= currentValue.length) {\n            let newSelection = prevSelection;\n\n            // Определяем тип операции, который был произведен над текстовым полем.\n            let opType = newValue.length >= currentValue.length\n                ? operationType.ADD\n                : operationType.DELETE;\n\n            // На пользовательском инпуте было выделение перед операцией,\n            // значит могла быть операция или удаления или замены.\n            let beforeInputSelectionLength = this.beforeInputSelection.end - this.beforeInputSelection.start;\n            if (beforeInputSelectionLength >= 1) {\n                if (newValue.length !== currentValue.length - beforeInputSelectionLength) {\n                    opType = operationType.REPLACE;\n                }\n            }\n\n            // Для операции доавления и замены, если мы стояли на нередактируемом символе,\n            // то добаляем сдвиг до ближайшего редактируемого.\n            if (opType === operationType.ADD || opType === operationType.REPLACE) {\n                let index = this.beforeInputSelection.start;\n                while (!this.mask.isEditableIndex(index) && index < formattedValue.length) {\n                    index += 1;\n                }\n                newSelection += (index - this.beforeInputSelection.start);\n            }\n\n            // Если вдруг попали на нередактируемый символ маски,\n            // то подвигаем курсом до ближайшего редактируемого.\n            if (opType === operationType.ADD || opType === operationType.REPLACE) {\n                while (!this.mask.isEditableIndex(newSelection) && newSelection < formattedValue.length) {\n                    newSelection += 1;\n                }\n            } else if (opType === operationType.DELETE) {\n                while (!this.mask.isEditableIndex(newSelection - 1) && newSelection > 0) {\n                    newSelection -= 1;\n                }\n            }\n\n            this.setInputSelection(this.clampSelection(newSelection));\n        // Если изменение поля произошло в конце ввода.\n        // Android chrome имеет дефект с автоматической установкой каретки\n        // при использовании клавиатуры отличной от type=\"text\".\n        } else if (IS_ANDROID) {\n            this.setInputSelectionByTimeout(event.target.selectionStart);\n        }\n\n        return event;\n    }\n\n    /**\n     * Возвращает положение каретки с учетом первого и последнего редактируемого символа маски.\n     *\n     * @param {Number} selection Положение каретки\n     * @returns {Number}\n     */\n    clampSelection(selection) {\n        if (selection < this.mask.firstEditableIndex) {\n            return this.mask.firstEditableIndex;\n        }\n\n        // +1 разрешает каретке становится в конец поля ввода при необходимости.\n        if (selection > this.mask.lastEditableIndex + 1) {\n            return this.mask.lastEditableIndex + 1;\n        }\n\n        return selection;\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в новую позицию.\n     *\n     * @param {Number} selection Новое положение каретки\n     */\n    setInputSelection(selection) {\n        this.input.selectionStart = selection;\n        this.input.selectionEnd = selection;\n\n        // IE10 не умеет синхронно в событие `change` переставлять каретку.\n        // Android chrome имеет дефект с автоматической установкой каретки\n        // при использовании клавиатуры отличной от type=\"text\".\n        if (IS_IE9_10 || IS_ANDROID) {\n            this.setInputSelectionByTimeout(selection);\n        }\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в заданную позицию асинхронно.\n     *\n     * Во-избежание дефекта с установкой каретки, наблюдаемом в мобильных браузерах, а так же\n     * браузерах IE9-10, установка происходит асинхронно, с минимальной задержкой,\n     * с помощью [setTimeout] обертки.\n     *\n     * @param {Number} selection Положение каретки\n     */\n    setInputSelectionByTimeout(selection) {\n        if (this.caretFixTimeout) {\n            clearTimeout(this.caretFixTimeout);\n            this.caretFixTimeout = null;\n        }\n\n        this.caretFixTimeout = setTimeout(() => {\n            this.caretFixTimeout = null;\n            this.input.selectionStart = selection;\n            this.input.selectionEnd = selection;\n        }, 0);\n    }\n}\n\nexport default MaskedInput;\n"]}