'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _reactAddonsCreateFragment = require('react-addons-create-fragment');

var _reactAddonsCreateFragment2 = _interopRequireDefault(_reactAddonsCreateFragment);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент группы чекбоксов.
 */
var CheckBoxGroup = (_dec = (0, _cn2.default)('checkbox-group'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(CheckBoxGroup, _React$Component);

    function CheckBoxGroup() {
        var _temp, _this, _ret;

        _classCallCheck(this, CheckBoxGroup);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            value: []
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    CheckBoxGroup.prototype.render = function render(cn) {
        var _this2 = this;

        var children = null;
        var props = { name: this.props.name };
        var checkboxGroupParts = {};

        if (this.props.disabled !== undefined) {
            props.disabled = this.props.disabled;
        }

        if (this.props.children) {
            children = this.props.children.length ? this.props.children : [this.props.children];
        }

        if (this.props.type === 'button') {
            props = Object.assign({}, props, { width: this.props.width });
        }

        if (children) {
            this.checkboxes = [];

            var value = this.props.value !== undefined ? this.props.value : this.state.value;

            _react2.default.Children.forEach(children, function (checkbox, index) {
                var checkboxNode = _react2.default.cloneElement(checkbox, Object.assign({
                    ref: function ref(checkbox) {
                        return _this2.checkboxes.push(checkbox);
                    },
                    checked: checkbox.props.checked !== undefined ? checkbox.props.checked : value.some(function (groupValue) {
                        return groupValue === checkbox.props.value;
                    }),
                    onChange: checkbox.props.onChange !== undefined ? checkbox.props.onChange : function (checked) {
                        return _this2.handleCheckboxChange(checkbox.props.value, checked);
                    }
                }, props));

                checkboxGroupParts['checkbox-' + index] = _this2.props.type !== 'button' && _this2.props.type !== 'line' ? _react2.default.createElement(
                    'div',
                    null,
                    checkboxNode
                ) : checkboxNode;
            });
        }

        return _react2.default.createElement(
            'span',
            {
                className: cn({
                    type: this.props.type,
                    disabled: props.disabled,
                    width: props.width ? props.width : null
                }) + ' control-group',
                id: this.props.id,
                role: 'group',
                tabIndex: '-1',
                onFocus: this.handleFocus,
                onBlur: this.handleBlur
            },
            !!this.props.label && _react2.default.createElement(
                'div',
                { className: cn('label') },
                this.props.label
            ),
            (0, _reactAddonsCreateFragment2.default)(checkboxGroupParts)
        );
    };

    CheckBoxGroup.prototype.handleCheckboxChange = function handleCheckboxChange(value, checked) {
        var newValue = this.props.value ? this.props.value.slice() : this.state.value.slice();
        var changedValueIndex = newValue.findIndex(function (stateValue) {
            return stateValue === value;
        });

        if (checked) {
            newValue.push(value);
        } else {
            newValue.splice(changedValueIndex, 1);
        }

        this.setState({
            value: newValue
        });

        if (this.props.onChange) {
            this.props.onChange(newValue);
        }
    };

    CheckBoxGroup.prototype.handleFocus = function handleFocus(event) {
        if (this.props.onFocus) {
            this.props.onFocus(event);
        }
    };

    CheckBoxGroup.prototype.handleBlur = function handleBlur(event) {
        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    /**
     * Устанавливает фокус на первую чекбокс-кнопку в группе.
     *
     * @public
     */


    CheckBoxGroup.prototype.focus = function focus() {
        if (this.checkboxes && this.checkboxes[0]) {
            this.checkboxes[0].focus();
        }
    };

    /**
     * Убирает фокус с группы чекбокс-кнопок.
     *
     * @public
     */


    CheckBoxGroup.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    return CheckBoxGroup;
}(_react2.default.Component), _class3.defaultProps = {
    type: 'normal'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleCheckboxChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleCheckboxChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype)), _class2)) || _class) || _class);
CheckBoxGroup.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Тип компонента */
    type: _propTypes2.default.oneOf(['normal', 'button', 'line']),
    /** Выбранные чекбокс-кнопки */
    value: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
    /** Отображение попапа с ошибкой в момент когда фокус находится на компоненте */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Уникальное имя блока */
    name: _propTypes2.default.string,
    /** Управление возможностью изменения состояния 'checked' дочерних компонентов `CheckBox` */
    disabled: _propTypes2.default.bool,
    /** Дочерние элементы `CheckBoxGroup`, как правило, компоненты `CheckBox` */
    children: _propTypes2.default.node,
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Лейбл для группы */
    label: _propTypes2.default.node,
    /** Обработчик фокуса радиогруппы */
    onFocus: _propTypes2.default.func,
    /** Обработчик снятия фокуса с радиогруппы */
    onBlur: _propTypes2.default.func,
    /** Обработчик изменения значения 'checked' одного из дочерних радио-кнопок */
    onChange: _propTypes2.default.func
} : {};
exports.default = CheckBoxGroup;
//# sourceMappingURL=checkbox-group.js.map
