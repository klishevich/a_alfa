{"version":3,"sources":["checkbox-group/checkbox-group.jsx"],"names":["CheckBoxGroup","state","value","render","cn","children","props","name","checkboxGroupParts","disabled","undefined","length","type","width","checkboxes","Children","forEach","checkbox","index","checkboxNode","cloneElement","ref","push","checked","some","groupValue","onChange","handleCheckboxChange","id","handleFocus","handleBlur","label","newValue","slice","changedValueIndex","findIndex","stateValue","splice","setState","event","onFocus","onBlur","focus","blur","document","activeElement","Component","defaultProps","propTypes","oneOf","arrayOf","oneOfType","string","number","bool","node","theme","className","func"],"mappings":"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","file":"checkbox-group.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport createFragment from 'react-addons-create-fragment';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\n/**\n * Компонент группы чекбоксов.\n */\n@cn('checkbox-group')\n@performance()\nclass CheckBoxGroup extends React.Component {\n    static propTypes = {\n        /** Тип компонента */\n        type: Type.oneOf(['normal', 'button', 'line']),\n        /** Выбранные чекбокс-кнопки */\n        value: Type.arrayOf(Type.oneOfType([Type.string, Type.number])),\n        /** Отображение попапа с ошибкой в момент когда фокус находится на компоненте */\n        width: Type.oneOf(['default', 'available']),\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Управление возможностью изменения состояния 'checked' дочерних компонентов `CheckBox` */\n        disabled: Type.bool,\n        /** Дочерние элементы `CheckBoxGroup`, как правило, компоненты `CheckBox` */\n        children: Type.node,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Идентификатор компонента в DOM */\n        id: Type.string,\n        /** Лейбл для группы */\n        label: Type.node,\n        /** Обработчик фокуса радиогруппы */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса с радиогруппы */\n        onBlur: Type.func,\n        /** Обработчик изменения значения 'checked' одного из дочерних радио-кнопок */\n        onChange: Type.func\n    };\n\n    static defaultProps = {\n        type: 'normal'\n    };\n\n    state = {\n        value: []\n    };\n\n    render(cn) {\n        let children = null;\n        let props = { name: this.props.name };\n        let checkboxGroupParts = {};\n\n        if (this.props.disabled !== undefined) {\n            props.disabled = this.props.disabled;\n        }\n\n        if (this.props.children) {\n            children = this.props.children.length ? this.props.children : [this.props.children];\n        }\n\n        if (this.props.type === 'button') {\n            props = { ...props, width: this.props.width };\n        }\n\n        if (children) {\n            this.checkboxes = [];\n\n            let value = this.props.value !== undefined\n                ? this.props.value\n                : this.state.value;\n\n            React.Children.forEach(children, (checkbox, index) => {\n                let checkboxNode = React.cloneElement(checkbox, {\n                    ref: checkbox => this.checkboxes.push(checkbox),\n                    checked: checkbox.props.checked !== undefined\n                        ? checkbox.props.checked : value.some(groupValue => groupValue === checkbox.props.value),\n                    onChange: checkbox.props.onChange !== undefined\n                        ? checkbox.props.onChange : checked => this.handleCheckboxChange(checkbox.props.value, checked),\n                    ...props\n                });\n\n                checkboxGroupParts[`checkbox-${index}`] = (this.props.type !== 'button' && this.props.type !== 'line')\n                    ? <div>{ checkboxNode }</div>\n                    : checkboxNode;\n            });\n        }\n\n        return (\n            <span\n                className={\n                    `${cn({\n                        type: this.props.type,\n                        disabled: props.disabled,\n                        width: props.width ? props.width : null\n                    })} control-group`\n                }\n                id={ this.props.id }\n                role='group'\n                tabIndex='-1'\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n            >\n                {\n                    !!this.props.label &&\n                    <div className={ cn('label') }>\n                        { this.props.label }\n                    </div>\n                }\n                { createFragment(checkboxGroupParts) }\n            </span>\n        );\n    }\n\n    @autobind\n    handleCheckboxChange(value, checked) {\n        let newValue = this.props.value ? this.props.value.slice() : this.state.value.slice();\n        let changedValueIndex = newValue.findIndex(stateValue => stateValue === value);\n\n        if (checked) {\n            newValue.push(value);\n        } else {\n            newValue.splice(changedValueIndex, 1);\n        }\n\n        this.setState({\n            value: newValue\n        });\n\n        if (this.props.onChange) {\n            this.props.onChange(newValue);\n        }\n    }\n\n    @autobind\n    handleFocus(event) {\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на первую чекбокс-кнопку в группе.\n     *\n     * @public\n     */\n    focus() {\n        if (this.checkboxes && this.checkboxes[0]) {\n            this.checkboxes[0].focus();\n        }\n    }\n\n    /**\n     * Убирает фокус с группы чекбокс-кнопок.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n}\n\nexport default CheckBoxGroup;\n"]}