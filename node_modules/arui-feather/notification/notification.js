'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* eslint jsx-a11y/no-static-element-interactions: 0 */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _close = require('../icon/ui/close');

var _close2 = _interopRequireDefault(_close);

var _error = require('../icon/ui/error');

var _error2 = _interopRequireDefault(_error);

var _fail = require('../icon/ui/fail');

var _fail2 = _interopRequireDefault(_fail);

var _ok = require('../icon/ui/ok');

var _ok2 = _interopRequireDefault(_ok);

var _iconButton = require('../icon-button/icon-button');

var _iconButton2 = _interopRequireDefault(_iconButton);

var _swipeable = require('../swipeable');

var _swipeable2 = _interopRequireDefault(_swipeable);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _window = require('../lib/window');

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент всплывающего окна.
 */
var Notification = (_dec = (0, _cn2.default)('notification'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Notification, _React$Component);

    function Notification() {
        var _temp, _this, _ret;

        _classCallCheck(this, Notification);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            hovered: false
        }, _this.closeTimeout = null, _this.clickEventBindTimeout = null, _this.isWindowClickBinded = false, _temp), _possibleConstructorReturn(_this, _ret);
    }

    Notification.prototype.componentDidMount = function componentDidMount() {
        this.startCloseTimer();

        if (this.props.onClickOutside) {
            this.ensureClickEvent();
        }
    };

    Notification.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.onClickOutside !== this.props.onClickOutside) {
            this.ensureClickEvent();
        } else if (prevProps.visible !== this.props.visible) {
            this.ensureClickEvent(!this.props.visible);
        }
    };

    Notification.prototype.componentWillUnmount = function componentWillUnmount() {
        this.stopCloseTimer();

        if (this.props.onClickOutside) {
            this.ensureClickEvent(true);
        }
    };

    Notification.prototype.render = function render(cn) {
        var _this2 = this;

        var ToggledIcon = void 0;

        switch (this.props.status) {
            case 'error':
                ToggledIcon = _error2.default;break;
            case 'fail':
                ToggledIcon = _fail2.default;break;
            case 'ok':
                ToggledIcon = _ok2.default;break;
            default:
                ToggledIcon = _ok2.default;break;
        }

        return _react2.default.createElement(
            _swipeable2.default,
            { onSwipe: this.handleSwipe },
            _react2.default.createElement(
                'div',
                {
                    ref: function ref(root) {
                        _this2.root = root;
                    },
                    className: cn({
                        visible: this.props.visible,
                        status: this.props.status,
                        hovered: this.state.hovered,
                        'stick-to': this.props.stickTo
                    }),
                    id: this.props.id,
                    style: this.getPosition(),
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave,
                    onClick: this.handleClick,
                    onKeyDown: this.handleKeyDown
                },
                _react2.default.createElement(
                    'div',
                    { className: cn('icon') },
                    this.props.icon || _react2.default.createElement(ToggledIcon, {
                        colored: this.props.status === 'ok' || this.props.status === 'error',
                        size: 'm'
                    })
                ),
                this.props.title && _react2.default.createElement(
                    'div',
                    { className: cn('title') },
                    this.props.title
                ),
                _react2.default.createElement(
                    'div',
                    { className: cn('content') },
                    this.props.children
                ),
                this.props.hasCloser && _react2.default.createElement(
                    _iconButton2.default,
                    {
                        className: cn('closer'),
                        size: 'm',
                        onClick: this.handleCloserClick
                    },
                    _react2.default.createElement(_close2.default, {
                        size: 'm'
                    })
                )
            )
        );
    };

    Notification.prototype.handleSwipe = function handleSwipe(direction) {
        if (direction === 'left' || direction === 'right' || direction === 'top') {
            this.handleCloserClick();
        }
    };

    Notification.prototype.handleCloserClick = function handleCloserClick() {
        if (this.props.onCloserClick) {
            this.props.onCloserClick();
        }
    };

    Notification.prototype.handleKeyDown = function handleKeyDown(event) {
        if (this.props.onKeyDown) {
            this.props.onKeyDown(event);
        }
    };

    Notification.prototype.handleMouseEnter = function handleMouseEnter(event) {
        this.setState({ hovered: true });
        this.stopCloseTimer();

        if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event);
        }
    };

    Notification.prototype.handleMouseLeave = function handleMouseLeave(event) {
        this.setState({ hovered: false });
        this.stopCloseTimer();
        this.startCloseTimer();

        if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
        }
    };

    Notification.prototype.handleClick = function handleClick(event) {
        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };

    Notification.prototype.handleWindowClick = function handleWindowClick(event) {
        if (this.props.onClickOutside && this.root && (0, _window.isNodeOutsideElement)(event.target, this.root)) {
            this.props.onClickOutside(event);
        }
    };

    Notification.prototype.getPosition = function getPosition() {
        return { top: this.props.offset };
    };

    Notification.prototype.startCloseTimer = function startCloseTimer() {
        var _this3 = this;

        this.closeTimeout = setTimeout(function () {
            if (_this3.props.onCloseTimeout) {
                _this3.props.onCloseTimeout();
            }
        }, this.props.autoCloseDelay);
    };

    Notification.prototype.stopCloseTimer = function stopCloseTimer() {
        clearTimeout(this.closeTimeout);
        this.closeTimeout = null;
    };

    Notification.prototype.ensureClickEvent = function ensureClickEvent(isDestroy) {
        var _this4 = this;

        var isNeedBindEvent = isDestroy !== undefined ? !isDestroy : this.props.visible;

        // We need timeouts to not to catch the event that causes
        // popup opening (because it propagates to the `window`).
        if (this.clickEventBindTimeout) {
            clearTimeout(this.clickEventBindTimeout);
            this.clickEventBindTimeout = null;
        }

        this.clickEventBindTimeout = setTimeout(function () {
            if (!_this4.isWindowClickBinded && isNeedBindEvent) {
                window.addEventListener('click', _this4.handleWindowClick);
                window.addEventListener('touchend', _this4.handleWindowClick);
                _this4.isWindowClickBinded = true;
            } else if (_this4.isWindowClickBinded && !isNeedBindEvent) {
                window.removeEventListener('click', _this4.handleWindowClick);
                window.removeEventListener('touchend', _this4.handleWindowClick);
                _this4.isWindowClickBinded = false;
            }
        }, 0);
    };

    return Notification;
}(_react2.default.Component), _class3.defaultProps = {
    autoCloseDelay: 5000,
    stickTo: 'left',
    offset: 0,
    hasCloser: true
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleSwipe', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSwipe'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleCloserClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleCloserClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyDown', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyDown'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleWindowClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleWindowClick'), _class2.prototype)), _class2)) || _class) || _class);
Notification.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Тип компонента */
    status: _propTypes2.default.oneOf(['error', 'fail', 'ok']),
    /** Управление видимостью компонента */
    visible: _propTypes2.default.bool,
    /** Отступ от верхнего края */
    offset: _propTypes2.default.number,
    /** К какому краю прижат попап */
    stickTo: _propTypes2.default.oneOf(['left', 'right']),
    /** Управляет отображением кнопки закрытия уведомления */
    hasCloser: _propTypes2.default.bool,
    /** Дочерние элементы `Notification` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Заголовок сообщения */
    title: _propTypes2.default.node,
    /** Замена стандартной иконки */
    icon: _propTypes2.default.node,
    /** Время до закрытия компонента */
    autoCloseDelay: _propTypes2.default.number,
    /** Обработчик события истечения времени до закрытия компонента */
    onCloseTimeout: _propTypes2.default.func,
    /** Обработчик клика по крестику компонента */
    onCloserClick: _propTypes2.default.func,
    /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */
    onKeyDown: _propTypes2.default.func,
    /** Обработчик события наведения курсора на попап */
    onMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с попапа */
    onMouseLeave: _propTypes2.default.func,
    /** Обработчик клика вне компонента */
    onClickOutside: _propTypes2.default.func,
    /** Обработчик клика по компоненту */
    onClick: _propTypes2.default.func
} : {};
exports.default = Notification;
//# sourceMappingURL=notification.js.map
