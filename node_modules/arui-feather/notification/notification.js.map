{"version":3,"sources":["notification/notification.jsx"],"names":["Notification","state","hovered","closeTimeout","clickEventBindTimeout","isWindowClickBinded","componentDidMount","startCloseTimer","props","onClickOutside","ensureClickEvent","componentDidUpdate","prevProps","visible","componentWillUnmount","stopCloseTimer","render","cn","ToggledIcon","status","handleSwipe","root","stickTo","id","getPosition","handleMouseEnter","handleMouseLeave","handleClick","handleKeyDown","icon","title","children","hasCloser","handleCloserClick","direction","onCloserClick","event","onKeyDown","setState","onMouseEnter","onMouseLeave","onClick","handleWindowClick","target","top","offset","setTimeout","onCloseTimeout","autoCloseDelay","clearTimeout","isDestroy","isNeedBindEvent","undefined","window","addEventListener","removeEventListener","Component","defaultProps","propTypes","oneOf","bool","number","oneOfType","arrayOf","node","theme","className","string","func"],"mappings":"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","file":"notification.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint jsx-a11y/no-static-element-interactions: 0 */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport IconClose from '../icon/ui/close';\nimport IconError from '../icon/ui/error';\nimport IconFail from '../icon/ui/fail';\nimport IconOk from '../icon/ui/ok';\nimport IconButton from '../icon-button/icon-button';\nimport Swipeable from '../swipeable';\n\nimport cn from '../cn';\nimport { isNodeOutsideElement } from '../lib/window';\nimport performance from '../performance';\n\n/**\n * Компонент всплывающего окна.\n */\n@cn('notification')\n@performance()\nclass Notification extends React.Component {\n    static propTypes = {\n        /** Тип компонента */\n        status: Type.oneOf(['error', 'fail', 'ok']),\n        /** Управление видимостью компонента */\n        visible: Type.bool,\n        /** Отступ от верхнего края */\n        offset: Type.number,\n        /** К какому краю прижат попап */\n        stickTo: Type.oneOf(['left', 'right']),\n        /** Управляет отображением кнопки закрытия уведомления */\n        hasCloser: Type.bool,\n        /** Дочерние элементы `Notification` */\n        children: Type.oneOfType([Type.arrayOf(Type.node), Type.node]),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Идентификатор компонента в DOM */\n        id: Type.string,\n        /** Заголовок сообщения */\n        title: Type.node,\n        /** Замена стандартной иконки */\n        icon: Type.node,\n        /** Время до закрытия компонента */\n        autoCloseDelay: Type.number,\n        /** Обработчик события истечения времени до закрытия компонента */\n        onCloseTimeout: Type.func,\n        /** Обработчик клика по крестику компонента */\n        onCloserClick: Type.func,\n        /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */\n        onKeyDown: Type.func,\n        /** Обработчик события наведения курсора на попап */\n        onMouseEnter: Type.func,\n        /** Обработчик события снятия курсора с попапа */\n        onMouseLeave: Type.func,\n        /** Обработчик клика вне компонента */\n        onClickOutside: Type.func,\n        /** Обработчик клика по компоненту */\n        onClick: Type.func\n    };\n\n    static defaultProps = {\n        autoCloseDelay: 5000,\n        stickTo: 'left',\n        offset: 0,\n        hasCloser: true\n    };\n\n    state = {\n        hovered: false\n    };\n\n    root;\n\n    closeTimeout = null;\n    clickEventBindTimeout = null;\n    isWindowClickBinded = false;\n\n    componentDidMount() {\n        this.startCloseTimer();\n\n        if (this.props.onClickOutside) {\n            this.ensureClickEvent();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.onClickOutside !== this.props.onClickOutside) {\n            this.ensureClickEvent();\n        } else if (prevProps.visible !== this.props.visible) {\n            this.ensureClickEvent(!this.props.visible);\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopCloseTimer();\n\n        if (this.props.onClickOutside) {\n            this.ensureClickEvent(true);\n        }\n    }\n\n    render(cn) {\n        let ToggledIcon;\n\n        switch (this.props.status) {\n            case 'error': ToggledIcon = IconError; break;\n            case 'fail': ToggledIcon = IconFail; break;\n            case 'ok': ToggledIcon = IconOk; break;\n            default: ToggledIcon = IconOk; break;\n        }\n\n        return (\n            <Swipeable onSwipe={ this.handleSwipe }>\n                <div\n                    ref={ (root) => { this.root = root; } }\n                    className={ cn({\n                        visible: this.props.visible,\n                        status: this.props.status,\n                        hovered: this.state.hovered,\n                        'stick-to': this.props.stickTo\n                    }) }\n                    id={ this.props.id }\n                    style={ this.getPosition() }\n                    onMouseEnter={ this.handleMouseEnter }\n                    onMouseLeave={ this.handleMouseLeave }\n                    onClick={ this.handleClick }\n                    onKeyDown={ this.handleKeyDown }\n                >\n                    <div className={ cn('icon') }>\n                        {\n                            this.props.icon ||\n                            <ToggledIcon\n                                colored={ this.props.status === 'ok' || this.props.status === 'error' }\n                                size='m'\n                            />\n                        }\n                    </div>\n                    { this.props.title &&\n                        <div className={ cn('title') }>\n                            { this.props.title }\n                        </div>\n                    }\n                    <div className={ cn('content') }>\n                        { this.props.children }\n                    </div>\n                    {\n                        this.props.hasCloser &&\n                        <IconButton\n                            className={ cn('closer') }\n                            size='m'\n                            onClick={ this.handleCloserClick }\n                        >\n                            <IconClose\n                                size='m'\n                            />\n                        </IconButton>\n                    }\n                </div>\n            </Swipeable>\n        );\n    }\n\n    @autobind\n    handleSwipe(direction) {\n        if (direction === 'left' || direction === 'right' || direction === 'top') {\n            this.handleCloserClick();\n        }\n    }\n\n    @autobind\n    handleCloserClick() {\n        if (this.props.onCloserClick) {\n            this.props.onCloserClick();\n        }\n    }\n\n    @autobind\n    handleKeyDown(event) {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleMouseEnter(event) {\n        this.setState({ hovered: true });\n        this.stopCloseTimer();\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    }\n\n    @autobind\n    handleMouseLeave(event) {\n        this.setState({ hovered: false });\n        this.stopCloseTimer();\n        this.startCloseTimer();\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    }\n\n    @autobind\n    handleClick(event) {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleWindowClick(event) {\n        if (this.props.onClickOutside && this.root &&\n            isNodeOutsideElement(event.target, this.root)) {\n            this.props.onClickOutside(event);\n        }\n    }\n\n    getPosition() {\n        return { top: this.props.offset };\n    }\n\n    startCloseTimer() {\n        this.closeTimeout = setTimeout(() => {\n            if (this.props.onCloseTimeout) {\n                this.props.onCloseTimeout();\n            }\n        }, this.props.autoCloseDelay);\n    }\n\n    stopCloseTimer() {\n        clearTimeout(this.closeTimeout);\n        this.closeTimeout = null;\n    }\n\n    ensureClickEvent(isDestroy) {\n        let isNeedBindEvent = isDestroy !== undefined ? !isDestroy : this.props.visible;\n\n        // We need timeouts to not to catch the event that causes\n        // popup opening (because it propagates to the `window`).\n        if (this.clickEventBindTimeout) {\n            clearTimeout(this.clickEventBindTimeout);\n            this.clickEventBindTimeout = null;\n        }\n\n        this.clickEventBindTimeout = setTimeout(() => {\n            if (!this.isWindowClickBinded && isNeedBindEvent) {\n                window.addEventListener('click', this.handleWindowClick);\n                window.addEventListener('touchend', this.handleWindowClick);\n                this.isWindowClickBinded = true;\n            } else if (this.isWindowClickBinded && !isNeedBindEvent) {\n                window.removeEventListener('click', this.handleWindowClick);\n                window.removeEventListener('touchend', this.handleWindowClick);\n                this.isWindowClickBinded = false;\n            }\n        }, 0);\n    }\n}\n\nexport default Notification;\n"]}