{"version":3,"sources":["resize-sensor/resize-sensor.jsx"],"names":["ResizeSensor","componentDidMount","iframe","contentWindow","addEventListener","handleResize","componentWillUnmount","removeEventListener","render","iframeStyle","position","top","left","width","height","background","border","zIndex","props","onResize","Component","propTypes","func"],"mappings":";;;;2BAAA;;;;AAIA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;IAQMA,Y;;;;;;;;;2BAWFC,iB,gCAAoB;AAChB,YAAI,KAAKC,MAAL,CAAYC,aAAhB,EAA+B;AAC3B,iBAAKD,MAAL,CAAYC,aAAZ,CAA0BC,gBAA1B,CAA2C,QAA3C,EAAqD,KAAKC,YAA1D;AACH;AACJ,K;;AATD;;;;;2BAWAC,oB,mCAAuB;AACnB,YAAI,KAAKJ,MAAL,CAAYC,aAAhB,EAA+B;AAC3B,iBAAKD,MAAL,CAAYC,aAAZ,CAA0BI,mBAA1B,CAA8C,QAA9C,EAAwD,KAAKF,YAA7D;AACH;AACJ,K;;2BAEDG,M,qBAAS;AAAA;;AACL,YAAIC,cAAc;AACdC,sBAAU,UADI;AAEdC,iBAAK,CAFS;AAGdC,kBAAM,CAHQ;AAIdC,mBAAO,MAJO;AAKdC,oBAAQ,MALM;AAMdC,wBAAY,aANE;AAOdC,oBAAQ,MAPM;AAQdC,oBAAQ,CAAC;AARK,SAAlB;;AAWA;AACA,eACI;AACI,iBAAM,aAACf,MAAD,EAAY;AAAE,uBAAKA,MAAL,GAAcA,MAAd;AAAuB,aAD/C;AAEI,mBAAQO,WAFZ;AAGI,sBAAS;AAHb,UADJ;AAOA;AACH,K;;2BAGDJ,Y,2BAAe;AACX,YAAI,KAAKa,KAAL,CAAWC,QAAf,EAAyB;AACrB,iBAAKD,KAAL,CAAWC,QAAX;AACH;AACJ,K;;;EAnDsB,gBAAMC,S;AAA3BpB,Y,CACKqB,S,2CAAY;AACf;AACAF,cAAU,oBAAKG;AAFA,C;kBAqDRtB,Y","file":"resize-sensor.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\n/**\n * Компонент позволяющий слушать изменения размера родительского элемента.\n * Для использования разместите его в элементе об изменении размера, которого\n * вы хотите знать и добавьте внешний обработчик `onResize`.\n *\n * Важно! Элемент, размер которого вы хотите измерять, должен обладать\n * css свойством `position: relative;`.\n */\nclass ResizeSensor extends React.Component {\n    static propTypes = {\n        /** Callback на изменение размера родителя */\n        onResize: Type.func\n    };\n\n    /**\n     * @type {HTMLIFrameElement}\n     */\n    iframe;\n\n    componentDidMount() {\n        if (this.iframe.contentWindow) {\n            this.iframe.contentWindow.addEventListener('resize', this.handleResize);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.iframe.contentWindow) {\n            this.iframe.contentWindow.removeEventListener('resize', this.handleResize);\n        }\n    }\n\n    render() {\n        let iframeStyle = {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: 'transparent',\n            border: 'none',\n            zIndex: -1\n        };\n\n        /* eslint-disable jsx-a11y/iframe-has-title */\n        return (\n            <iframe\n                ref={ (iframe) => { this.iframe = iframe; } }\n                style={ iframeStyle }\n                tabIndex='-1'\n            />\n        );\n        /* eslint-enable jsx-a11y/iframe-has-title */\n    }\n\n    @autobind\n    handleResize() {\n        if (this.props.onResize) {\n            this.props.onResize();\n        }\n    }\n}\n\nexport default ResizeSensor;\n"]}