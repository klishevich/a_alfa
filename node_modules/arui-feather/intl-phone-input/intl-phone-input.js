'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _flagIcon = require('../flag-icon/flag-icon');

var _flagIcon2 = _interopRequireDefault(_flagIcon);

var _input = require('../input/input');

var _input2 = _interopRequireDefault(_input);

var _select = require('../select/select');

var _select2 = _interopRequireDefault(_select);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

var _countries = require('../lib/countries');

var _countries2 = _interopRequireDefault(_countries);

var _relatedTarget = require('../lib/related-target');

var _relatedTarget2 = _interopRequireDefault(_relatedTarget);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var MAX_DIAL_CODE_LENGTH = 4;

/**
 * Компонент ввода международного телефона по маске.
 *
 */
var IntlPhoneInput = (_dec = (0, _cn2.default)('intl-phone-input', _input2.default, _select2.default), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(IntlPhoneInput, _React$Component);

    function IntlPhoneInput() {
        var _temp, _this, _ret;

        _classCallCheck(this, IntlPhoneInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            countryIso2: 'ru',
            inputFocused: false,
            inputValue: _this.props.value,
            selectFocused: false,
            onceOpened: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    IntlPhoneInput.prototype.componentDidMount = function componentDidMount() {
        this.loadUtil();
        this.setCountry();
    };

    IntlPhoneInput.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
        if (this.state.inputValue !== nextState.inputValue) {
            if (this.props.onChange) {
                this.props.onChange(nextState.inputValue);
            }
        }
    };

    IntlPhoneInput.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    };

    IntlPhoneInput.prototype.render = function render(cn, Input, Select) {
        var _this2 = this;

        return _react2.default.createElement(Input, _extends({
            className: cn(),
            ref: function ref(input) {
                _this2.input = input;
            }
        }, this.props, {
            focused: this.state.inputFocused || this.state.selectFocused,
            leftAddons: _react2.default.createElement(Select, {
                className: cn('select'),
                ref: function ref(select) {
                    _this2.select = select;
                },
                disabled: this.props.disabled,
                mode: 'radio',
                options: this.getOptions(cn),
                popupSecondaryOffset: this.getSelectPopupOffset(),
                renderButtonContent: this.renderSelectButtonContent,
                size: this.props.size,
                value: [this.state.countryIso2],
                onBlur: this.handleSelectBlur,
                onChange: this.handleSelectChange,
                onClick: this.handleSelectClick,
                onFocus: this.handleSelectFocus
            }),
            noValidate: true,
            type: 'tel',
            value: this.getValue(),
            onBlur: this.handleInputBlur,
            onChange: this.handleInputChange,
            onFocus: this.handleInputFocus
        }));
    };

    IntlPhoneInput.prototype.renderFlagIcon = function renderFlagIcon(countryIso2) {
        return _react2.default.createElement(_flagIcon2.default, {
            country: countryIso2,
            mode: this.state.onceOpened ? 'sprite' : 'chunk',
            size: this.props.size
        });
    };

    IntlPhoneInput.prototype.renderSelectButtonContent = function renderSelectButtonContent() {
        return this.renderFlagIcon(this.state.countryIso2);
    };

    IntlPhoneInput.prototype.handleSelectFocus = function handleSelectFocus(event) {
        if (!this.state.onceOpened) {
            this.setState({
                onceOpened: true
            });
        }

        this.resolveFocusedState({ selectFocused: true }, event);
    };

    IntlPhoneInput.prototype.handleSelectBlur = function handleSelectBlur(event) {
        this.resolveFocusedState({ selectFocused: false }, event);
    };

    IntlPhoneInput.prototype.handleSelectChange = function handleSelectChange(value) {
        var _this3 = this;

        var inputValue = '+' + this.countries.find(function (country) {
            return country.iso2 === value[0];
        }).dialCode;

        this.setState({
            countryIso2: value[0],
            inputValue: inputValue
        }, function () {
            // Wait for select blur, then focus on input
            _this3.timeoutId = setTimeout(function () {
                _this3.input.focus();
                _this3.input.setSelectionRange(inputValue.length);
            }, 0);
        });
    };

    IntlPhoneInput.prototype.handleSelectClick = function handleSelectClick() {
        // Set focus to input on select closing by it's button toggle
        if (this.state.selectFocused) {
            this.input.focus();
            this.input.setSelectionRange(-1);
        }
    };

    IntlPhoneInput.prototype.handleInputFocus = function handleInputFocus(event) {
        this.resolveFocusedState({ inputFocused: true }, event);
    };

    IntlPhoneInput.prototype.handleInputBlur = function handleInputBlur(event) {
        this.resolveFocusedState({ inputFocused: false }, event);
    };

    IntlPhoneInput.prototype.handleInputChange = function handleInputChange(value) {
        this.setState({
            inputValue: value.length === 1 && value !== '+' ? '+' + value : value
        }, this.setCountry);
    };

    IntlPhoneInput.prototype.getOptions = function getOptions(cn) {
        var _this4 = this;

        this.countries = _countries2.default.getCountries();

        return this.state.onceOpened ? this.countries.map(function (country) {
            return {
                value: country.iso2,
                text: _react2.default.createElement(
                    'span',
                    null,
                    country.name,
                    _react2.default.createElement(
                        'span',
                        { className: cn('select-option-code') },
                        '+',
                        country.dialCode
                    )
                ),
                nativeText: country.name + ' +' + country.dialCode,
                icon: _react2.default.createElement(
                    'span',
                    { className: cn('select-option-flag') },
                    _this4.renderFlagIcon(country.iso2)
                )
            };
        }) : [];
    };

    IntlPhoneInput.prototype.getSelectPopupOffset = function getSelectPopupOffset() {
        switch (this.props.size) {
            case 's':
                return -18;
            case 'm':
                return -24;
            case 'l':
                return -27;
            case 'xl':
                return -28;
        }

        return 0;
    };

    IntlPhoneInput.prototype.getValue = function getValue() {
        // Use value from state not props, cause of some formatting steps in component
        // Sync props.value with state.inputValue in componentWillUpdate
        return this.state.inputValue;
    };

    IntlPhoneInput.prototype.loadUtil = function loadUtil() {
        var _this5 = this;

        return import( /* webpackChunkName: "libphonenumber" */'libphonenumber-js/bundle/libphonenumber-js.min').then(function (util) {
            _this5.util = util;
        }).catch(function (error) {
            return 'An error occurred while loading libphonenumber-js:\n' + error;
        });
    };

    IntlPhoneInput.prototype.resolveFocusedState = function resolveFocusedState(nextFocusedStateItem, event) {
        var focusedState = {
            inputFocused: this.state.inputFocused,
            selectFocused: this.state.selectFocused
        };

        var relatedTarget = (0, _relatedTarget2.default)(event);
        var hasMatchedRelatedTarget = relatedTarget === event.target;
        var hasSelectRelatedTarget = false;

        // Check classNames matching in select's button (relatedTarget) & menu (focused target)
        if (relatedTarget.classList && event.target.classList) {
            hasSelectRelatedTarget = Array.from(relatedTarget.classList).some(function (item) {
                return (/select/.test(item)
                );
            }) === Array.from(event.target.classList).some(function (item) {
                return (/select/.test(item)
                );
            });
        }

        if (event.type === 'focus') {
            if (hasMatchedRelatedTarget || hasSelectRelatedTarget) {
                // If we have smth already focused, do not do anything
                var alreadyInFocus = Object.values(focusedState).some(function (item) {
                    return item;
                });

                if (!alreadyInFocus) {
                    this.setState(nextFocusedStateItem);

                    if (this.props.onFocus) {
                        this.props.onFocus(event);
                    }
                }
            }
        }

        if (event.type === 'blur') {
            if (relatedTarget === document.body) {
                // Set all values in focusedState to false cause we are blurring now
                this.setState(Object.keys(focusedState).reduce(function (result, item) {
                    result[item] = false;
                    return result;
                }, {}));

                if (this.props.onBlur) {
                    this.props.onBlur(event);
                }
            }
        }
    };

    IntlPhoneInput.prototype.setCountry = function setCountry() {
        var inputValue = this.getValue().replace(/ /g, '');

        for (var i = 0; i < this.countries.length; i++) {
            var country = this.countries[i];

            if (new RegExp('^\\+' + country.dialCode).test(inputValue)) {
                // Handle countries with priority field
                if (country.priority !== undefined) {
                    // Check max dial code length to allow country change
                    // For countries with identical dial codes or North American Numbering Plan (NANP)
                    if (inputValue.length < MAX_DIAL_CODE_LENGTH) {
                        // Update only value if countries are equal
                        if (this.state.countryIso2 === country.iso2) {
                            this.setValue(country.iso2, inputValue);
                            break;
                            // If not equal — set highest by priority
                        } else if (country.priority === 0) {
                            this.setValue(country.iso2, inputValue);
                            break;
                        }
                        // Otherwise don't change already selected country, just set value
                    } else if (this.state.countryIso2 === country.iso2) {
                        this.setValue(country.iso2, inputValue);
                        break;
                    }
                    // Handle all other countries
                } else {
                    this.setValue(country.iso2, inputValue);
                    break;
                }
            }
        }
    };

    IntlPhoneInput.prototype.setValue = function setValue(countryIso2, inputValue) {
        this.asYouType = this.util ? new this.util.AsYouType(countryIso2.toUpperCase()) : null;
        this.setState({
            inputValue: this.asYouType ? this.asYouType.input(inputValue) : inputValue,
            countryIso2: countryIso2
        });
    };

    /**
     * Возвращает ссылку на HTMLElement инпута.
     *
     * @public
     * @returns {HTMLInputElement}
     */


    IntlPhoneInput.prototype.getControl = function getControl() {
        return this.input.getControl();
    };

    /**
     * Устанавливает фокус на поле ввода.
     *
     * @public
     */


    IntlPhoneInput.prototype.focus = function focus() {
        this.input.focus();
    };

    /**
     * Убирает фокус с поля ввода.
     *
     * @public
     */


    IntlPhoneInput.prototype.blur = function blur() {
        this.input.blur();
    };

    /**
     * Скроллит страницу до поля ввода.
     *
     * @public
     */


    IntlPhoneInput.prototype.scrollTo = function scrollTo() {
        this.input.scrollTo();
    };

    return IntlPhoneInput;
}(_react2.default.Component), _class3.defaultProps = {
    size: 'm',
    value: '+7'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'renderSelectButtonContent', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'renderSelectButtonContent'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSelectFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSelectFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSelectBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSelectBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSelectChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSelectChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSelectClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSelectClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleInputFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleInputFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleInputBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleInputBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleInputChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleInputChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'getOptions', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'getOptions'), _class2.prototype)), _class2)) || _class) || _class);
IntlPhoneInput.propTypes = process.env.NODE_ENV !== "production" ? _input2.default.propTypes : {};
exports.default = IntlPhoneInput;
//# sourceMappingURL=intl-phone-input.js.map
