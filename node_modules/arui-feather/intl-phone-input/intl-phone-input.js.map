{"version":3,"sources":["intl-phone-input/intl-phone-input.jsx"],"names":["MAX_DIAL_CODE_LENGTH","IntlPhoneInput","state","countryIso2","inputFocused","inputValue","props","value","selectFocused","onceOpened","componentDidMount","loadUtil","setCountry","componentWillUpdate","nextProps","nextState","onChange","componentWillUnmount","timeoutId","clearTimeout","render","cn","Input","Select","input","select","disabled","getOptions","getSelectPopupOffset","renderSelectButtonContent","size","handleSelectBlur","handleSelectChange","handleSelectClick","handleSelectFocus","getValue","handleInputBlur","handleInputChange","handleInputFocus","renderFlagIcon","event","setState","resolveFocusedState","countries","find","country","iso2","dialCode","setTimeout","focus","setSelectionRange","length","getCountries","map","text","name","nativeText","icon","then","util","catch","error","nextFocusedStateItem","focusedState","relatedTarget","hasMatchedRelatedTarget","target","hasSelectRelatedTarget","classList","Array","from","some","test","item","type","alreadyInFocus","Object","values","onFocus","document","body","keys","reduce","result","onBlur","replace","i","RegExp","priority","undefined","setValue","asYouType","AsYouType","toUpperCase","getControl","blur","scrollTo","Component","defaultProps","propTypes"],"mappings":"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","file":"intl-phone-input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\n\nimport FlagIcon from '../flag-icon/flag-icon';\nimport Input from '../input/input';\nimport Select from '../select/select';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\nimport countries from '../lib/countries';\nimport getRelatedTarget from '../lib/related-target';\n\nconst MAX_DIAL_CODE_LENGTH = 4;\n\n/**\n * Компонент ввода международного телефона по маске.\n *\n */\n@cn('intl-phone-input', Input, Select)\n@performance()\nclass IntlPhoneInput extends React.Component {\n    static propTypes = Input.propTypes;\n\n    static defaultProps = {\n        size: 'm',\n        value: '+7'\n    };\n\n    state = {\n        countryIso2: 'ru',\n        inputFocused: false,\n        inputValue: this.props.value,\n        selectFocused: false,\n        onceOpened: false\n    }\n\n    countries;\n    input;\n    select;\n    timeoutId;\n    util;\n    asYouType;\n\n    componentDidMount() {\n        this.loadUtil();\n        this.setCountry();\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (this.state.inputValue !== nextState.inputValue) {\n            if (this.props.onChange) {\n                this.props.onChange(nextState.inputValue);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n\n    render(cn, Input, Select) {\n        return (\n            <Input\n                className={ cn() }\n                ref={ (input) => { this.input = input; } }\n                { ...this.props }\n                focused={ this.state.inputFocused || this.state.selectFocused }\n                leftAddons={\n                    <Select\n                        className={ cn('select') }\n                        ref={ (select) => { this.select = select; } }\n                        disabled={ this.props.disabled }\n                        mode='radio'\n                        options={ this.getOptions(cn) }\n                        popupSecondaryOffset={ this.getSelectPopupOffset() }\n                        renderButtonContent={ this.renderSelectButtonContent }\n                        size={ this.props.size }\n                        value={ [this.state.countryIso2] }\n                        onBlur={ this.handleSelectBlur }\n                        onChange={ this.handleSelectChange }\n                        onClick={ this.handleSelectClick }\n                        onFocus={ this.handleSelectFocus }\n                    />\n                }\n                noValidate={ true }\n                type='tel'\n                value={ this.getValue() }\n                onBlur={ this.handleInputBlur }\n                onChange={ this.handleInputChange }\n                onFocus={ this.handleInputFocus }\n            />\n        );\n    }\n\n    renderFlagIcon(countryIso2) {\n        return (\n            <FlagIcon\n                country={ countryIso2 }\n                mode={ this.state.onceOpened ? 'sprite' : 'chunk' }\n                size={ this.props.size }\n            />\n        );\n    }\n\n    @autobind\n    renderSelectButtonContent() {\n        return this.renderFlagIcon(this.state.countryIso2);\n    }\n\n    @autobind\n    handleSelectFocus(event) {\n        if (!this.state.onceOpened) {\n            this.setState({\n                onceOpened: true\n            });\n        }\n\n        this.resolveFocusedState({ selectFocused: true }, event);\n    }\n\n    @autobind\n    handleSelectBlur(event) {\n        this.resolveFocusedState({ selectFocused: false }, event);\n    }\n\n    @autobind\n    handleSelectChange(value) {\n        let inputValue = `+${this.countries.find(country => country.iso2 === value[0]).dialCode}`;\n\n        this.setState({\n            countryIso2: value[0],\n            inputValue\n        }, () => {\n            // Wait for select blur, then focus on input\n            this.timeoutId = setTimeout(() => {\n                this.input.focus();\n                this.input.setSelectionRange(inputValue.length);\n            }, 0);\n        });\n    }\n\n    @autobind\n    handleSelectClick() {\n        // Set focus to input on select closing by it's button toggle\n        if (this.state.selectFocused) {\n            this.input.focus();\n            this.input.setSelectionRange(-1);\n        }\n    }\n\n    @autobind\n    handleInputFocus(event) {\n        this.resolveFocusedState({ inputFocused: true }, event);\n    }\n\n    @autobind\n    handleInputBlur(event) {\n        this.resolveFocusedState({ inputFocused: false }, event);\n    }\n\n    @autobind\n    handleInputChange(value) {\n        this.setState({\n            inputValue: value.length === 1 && value !== '+' ? `+${value}` : value\n        }, this.setCountry);\n    }\n\n    @autobind\n    getOptions(cn) {\n        this.countries = countries.getCountries();\n\n        return this.state.onceOpened ? this.countries.map(country => ({\n            value: country.iso2,\n            text: (\n                <span>\n                    { country.name }\n                    <span className={ cn('select-option-code') }>+{ country.dialCode }</span>\n                </span>\n            ),\n            nativeText: `${country.name} +${country.dialCode}`,\n            icon: (\n                <span className={ cn('select-option-flag') }>\n                    { this.renderFlagIcon(country.iso2) }\n                </span>\n            )\n        })) : [];\n    }\n\n    getSelectPopupOffset() {\n        switch (this.props.size) {\n            case 's': return -18;\n            case 'm': return -24;\n            case 'l': return -27;\n            case 'xl': return -28;\n        }\n\n        return 0;\n    }\n\n    getValue() {\n        // Use value from state not props, cause of some formatting steps in component\n        // Sync props.value with state.inputValue in componentWillUpdate\n        return this.state.inputValue;\n    }\n\n    loadUtil() {\n        return import(/* webpackChunkName: \"libphonenumber\" */ 'libphonenumber-js/bundle/libphonenumber-js.min')\n            .then((util) => { this.util = util; })\n            .catch(error => `An error occurred while loading libphonenumber-js:\\n${error}`);\n    }\n\n    resolveFocusedState(nextFocusedStateItem, event) {\n        let focusedState = {\n            inputFocused: this.state.inputFocused,\n            selectFocused: this.state.selectFocused\n        };\n\n        let relatedTarget = getRelatedTarget(event);\n        let hasMatchedRelatedTarget = relatedTarget === event.target;\n        let hasSelectRelatedTarget = false;\n\n        // Check classNames matching in select's button (relatedTarget) & menu (focused target)\n        if (relatedTarget.classList && event.target.classList) {\n            hasSelectRelatedTarget = Array.from(relatedTarget.classList).some(item => /select/.test(item)) ===\n                Array.from(event.target.classList).some(item => /select/.test(item));\n        }\n\n        if (event.type === 'focus') {\n            if (hasMatchedRelatedTarget || hasSelectRelatedTarget) {\n                // If we have smth already focused, do not do anything\n                let alreadyInFocus = Object.values(focusedState).some(item => item);\n\n                if (!alreadyInFocus) {\n                    this.setState(nextFocusedStateItem);\n\n                    if (this.props.onFocus) {\n                        this.props.onFocus(event);\n                    }\n                }\n            }\n        }\n\n        if (event.type === 'blur') {\n            if (relatedTarget === document.body) {\n                // Set all values in focusedState to false cause we are blurring now\n                this.setState(\n                    Object.keys(focusedState).reduce((result, item) => {\n                        result[item] = false;\n                        return result;\n                    }, {})\n                );\n\n                if (this.props.onBlur) {\n                    this.props.onBlur(event);\n                }\n            }\n        }\n    }\n\n    setCountry() {\n        let inputValue = this.getValue().replace(/ /g, '');\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n\n            if (new RegExp(`^\\\\+${country.dialCode}`).test(inputValue)) {\n                // Handle countries with priority field\n                if (country.priority !== undefined) {\n                    // Check max dial code length to allow country change\n                    // For countries with identical dial codes or North American Numbering Plan (NANP)\n                    if (inputValue.length < MAX_DIAL_CODE_LENGTH) {\n                        // Update only value if countries are equal\n                        if (this.state.countryIso2 === country.iso2) {\n                            this.setValue(country.iso2, inputValue);\n                            break;\n                        // If not equal — set highest by priority\n                        } else if (country.priority === 0) {\n                            this.setValue(country.iso2, inputValue);\n                            break;\n                        }\n                    // Otherwise don't change already selected country, just set value\n                    } else if (this.state.countryIso2 === country.iso2) {\n                        this.setValue(country.iso2, inputValue);\n                        break;\n                    }\n                // Handle all other countries\n                } else {\n                    this.setValue(country.iso2, inputValue);\n                    break;\n                }\n            }\n        }\n    }\n\n    setValue(countryIso2, inputValue) {\n        this.asYouType = this.util ? new this.util.AsYouType(countryIso2.toUpperCase()) : null;\n        this.setState({\n            inputValue: this.asYouType ? this.asYouType.input(inputValue) : inputValue,\n            countryIso2\n        });\n    }\n\n    /**\n     * Возвращает ссылку на HTMLElement инпута.\n     *\n     * @public\n     * @returns {HTMLInputElement}\n     */\n    getControl() {\n        return this.input.getControl();\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.input.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        this.input.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        this.input.scrollTo();\n    }\n}\n\nexport default IntlPhoneInput;\n"]}