'use strict';

exports.__esModule = true;

var _dec, _class, _class2, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                    * License, v. 2.0. If a copy of the MPL was not distributed with this
                                    * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactStyleProptype = require('react-style-proptype');

var _reactStyleProptype2 = _interopRequireDefault(_reactStyleProptype);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isolatedContainer = require('../isolated-container/isolated-container');

var _isolatedContainer2 = _interopRequireDefault(_isolatedContainer);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _propTypes3 = require('../lib/prop-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Становится родительским элементом для всех дочерних блоков `Popup`.
 * Предполагается задавать этому элементу `position: fixed` в стилях.
 *
 * @example
 * ```javascript
 * import PopupContainerProvider from 'arui-feather/popup-container-provider';
 * import Popup from 'arui-feather/popup';
 * import Page from 'arui-feather/page';
 *
 *  <Page>
 *     <PopupContainerProvider
 *         style={
 *             {
 *                 position: 'fixed',
 *                 top: 0,
 *                 right: 0,
 *                 bottom: 0,
 *                 width: '400px',
 *                 overflow: 'auto'
 *             }
 *         }
 *     >
 *         <Popup>
 *             Попап отрендерился в PopupContainerProvider, а не в body
 *             При скролле внутри блока, попап ездит вместе с остальным контентом.
 *         </Popup>
 *     </PopupContainerProvider>
 *  </Page>
 * ```
 */
var PopupContainerProvider = (_dec = (0, _cn2.default)('popup-container'), _dec(_class = (_temp2 = _class2 = function (_React$Component) {
    _inherits(PopupContainerProvider, _React$Component);

    function PopupContainerProvider() {
        var _temp, _this, _ret;

        _classCallCheck(this, PopupContainerProvider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            didRender: false // eslint-disable-line react/no-unused-state
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    PopupContainerProvider.prototype.getChildContext = function getChildContext() {
        return {
            isInCustomContainer: true,
            renderContainerElement: this.renderContainer && this.renderContainer.getNode(),
            positioningContainerElement: this.positioningContainer
        };
    };

    PopupContainerProvider.prototype.componentDidMount = function componentDidMount() {
        this.handleContainerDidRender();
    };

    PopupContainerProvider.prototype.render = function render(cn) {
        var _this2 = this;

        return _react2.default.createElement(
            'div',
            {
                className: cn(),
                id: this.props.id,
                ref: function ref(positioningContainer) {
                    _this2.positioningContainer = positioningContainer;
                },
                style: this.props.style
            },
            this.props.children,
            _react2.default.createElement(_isolatedContainer2.default, {
                ref: function ref(renderContainer) {
                    _this2.renderContainer = renderContainer;
                }
            })
        );
    };

    /**
     * Необходимо для обновления childContext сразу после получения refs.
     */


    PopupContainerProvider.prototype.handleContainerDidRender = function handleContainerDidRender() {
        this.setState({
            didRender: true // eslint-disable-line react/no-unused-state
        });
    };

    /**
     * Возвращает корневой `HTMLElement` компонента.
     *
     * @public
     * @returns {HTMLElement}
     */


    PopupContainerProvider.prototype.getNode = function getNode() {
        return this.positioningContainer;
    };

    return PopupContainerProvider;
}(_react2.default.Component), _class2.childContextTypes = {
    isInCustomContainer: _propTypes2.default.bool,
    renderContainerElement: _propTypes3.HtmlElement,
    positioningContainerElement: _propTypes3.HtmlElement
}, _temp2)) || _class);
PopupContainerProvider.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Дочерние элементы контейнера */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Объект со стилями */
    style: _reactStyleProptype2.default,
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white'])
} : {};
exports.default = PopupContainerProvider;
//# sourceMappingURL=popup-container-provider.js.map
