'use strict';

exports.__esModule = true;

var _dec, _dec2, _class; /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _reactAddonsCreateFragment = require('react-addons-create-fragment');

var _reactAddonsCreateFragment2 = _interopRequireDefault(_reactAddonsCreateFragment);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Компонент группы полей для текстового ввода.
 */
var InputGroup = (_dec = (0, _cn2.default)('input-group'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = function (_React$Component) {
    _inherits(InputGroup, _React$Component);

    function InputGroup() {
        _classCallCheck(this, InputGroup);

        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    InputGroup.prototype.render = function render(cn) {
        var _this2 = this;

        var children = null;
        var inputGroupParts = {};

        if (this.props.children) {
            children = this.props.children.length ? this.props.children : [this.props.children];
        }

        if (children) {
            _react2.default.Children.forEach(children, function (input, index) {
                input = _react2.default.cloneElement(input, {
                    width: _this2.props.width
                });

                inputGroupParts['input-' + index] = _react2.default.createElement(
                    'span',
                    {
                        className: cn('input-case', {
                            invalid: !!input.props.error,
                            disabled: input.props.disabled
                        })
                    },
                    input
                );
            });
        }

        return _react2.default.createElement(
            'span',
            {
                className: cn({ width: this.props.width }) + ' control-group',
                id: this.props.id,
                role: 'group',
                tabIndex: '-1'
            },
            (0, _reactAddonsCreateFragment2.default)(inputGroupParts)
        );
    };

    return InputGroup;
}(_react2.default.Component)) || _class) || _class);
InputGroup.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Управление возможностью компонента занимать всю ширину родителя */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Дочерние элементы `InputGroup`, как правило, компоненты `Input` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string
} : {};
exports.default = InputGroup;
//# sourceMappingURL=input-group.js.map
