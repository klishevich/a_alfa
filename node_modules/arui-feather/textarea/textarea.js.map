{"version":3,"sources":["textarea/textarea.jsx"],"names":["Textarea","state","focused","value","props","defaultValue","render","cn","undefined","textareaProps","className","autosize","control","autoComplete","autocomplete","disabled","id","name","tabIndex","placeholder","maxLength","onChange","handleChange","onFocus","handleFocus","onBlur","handleBlur","onPaste","handlePaste","onKeyPress","handleKeyPress","size","width","resize","invalid","error","label","root","maxRows","minRows","maxHeight","handleHeightChange","hint","setState","event","target","height","onHeightChange","focus","blur","document","activeElement","scrollTo","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","Component","defaultProps","propTypes","string","oneOf","bool","number","node","theme","func"],"mappings":"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","file":"textarea.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport Type from 'prop-types';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент многострочного текстового ввода.\n */\n@cn('textarea')\n@performance()\nclass Textarea extends React.Component {\n    static propTypes = {\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Управление автозаполнением компонента */\n        autocomplete: Type.bool,\n        /** Управление возможностью изменения значения компонента */\n        disabled: Type.bool,\n        /** Управление возможностью подстраивать высоту компонента под высоту текста  */\n        autosize: Type.bool,\n        /** Максимальное количество отображаемых строк (работает только вместе с autosize) */\n        maxRows: Type.number,\n        /** Минимальное количество отображаемых строк (работает только вместе c autosize) */\n        minRows: Type.number,\n        /** Максимальная высота элемента (работает только вместе с autosize) */\n        maxHeight: Type.number,\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled) */\n        defaultValue: Type.string,\n        /** Содержимое поля ввода */\n        value: Type.string,\n        /** Последовательность перехода между контролами при нажатии на Tab */\n        tabIndex: Type.number,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Управление возможностью изменения размеров компонента */\n        resize: Type.oneOf(['both', 'horizontal', 'vertical', 'none']),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Обработчик изменения значения 'value' */\n        onChange: Type.func,\n        /** Обработчик фокуса поля */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса c поля */\n        onBlur: Type.func,\n        /** Обработчик события вставки текста в поле */\n        onPaste: Type.func,\n        /** Обработчик события изменения высоты компонента со значением параметра \"autosize\" = true */\n        onHeightChange: Type.func,\n        /** Обработчик события нажатия клавиши при фокусе на поле */\n        onKeyPress: Type.func\n    };\n\n    static defaultProps = {\n        width: 'default',\n        autocomplete: true,\n        disabled: false,\n        autosize: true,\n        resize: 'none',\n        size: 'm'\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || ''\n    };\n\n    /**\n     * @type {HtmlSpanElement}\n     */\n    root;\n\n    /**\n     * @type {HTMLTextareaElement}\n     */\n    control;\n\n    render(cn) {\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let textareaProps = {\n            className: cn('control'),\n            [this.props.autosize ? 'inputRef' : 'ref']: (control) => { this.control = control; },\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            maxLength: this.props.maxLength,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onPaste: this.handlePaste,\n            onKeyPress: this.handleKeyPress\n        };\n\n        return (\n            <span\n                className={ cn({\n                    disabled: this.props.disabled,\n                    focused: this.state.focused,\n                    autosize: this.props.autosize,\n                    size: this.props.size,\n                    width: this.props.width,\n                    resize: this.props.resize,\n                    invalid: !!this.props.error,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    {\n                        !this.props.autosize\n                            ? <textarea { ...textareaProps } />\n                            : <TextareaAutosize\n                                { ...textareaProps }\n                                maxRows={ this.props.maxRows }\n                                minRows={ this.props.minRows }\n                                style={ { maxHeight: this.props.maxHeight } }\n                                onHeightChange={ this.handleHeightChange }\n                            />\n                    }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    @autobind\n    handleFocus() {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        let { value } = event.target;\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handlePaste(event) {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    }\n\n    @autobind\n    handleHeightChange(height) {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height);\n        }\n    }\n\n    @autobind\n    handleKeyPress(event) {\n        if (this.props.onKeyPress) {\n            this.props.onKeyPress(event);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n}\n\nexport default Textarea;\n"]}