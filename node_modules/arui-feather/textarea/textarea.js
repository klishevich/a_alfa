'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTextareaAutosize = require('react-textarea-autosize');

var _reactTextareaAutosize2 = _interopRequireDefault(_reactTextareaAutosize);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

var _scrollTo2 = require('../lib/scroll-to');

var _scrollTo3 = _interopRequireDefault(_scrollTo2);

var _vars = require('../vars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент многострочного текстового ввода.
 */
var Textarea = (_dec = (0, _cn2.default)('textarea'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Textarea, _React$Component);

    function Textarea() {
        var _temp, _this, _ret;

        _classCallCheck(this, Textarea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            focused: false,
            value: _this.props.defaultValue || ''
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * @type {HtmlSpanElement}
     */


    /**
     * @type {HTMLTextareaElement}
     */


    Textarea.prototype.render = function render(cn) {
        var _this2 = this,
            _textareaProps;

        var value = this.props.value !== undefined ? this.props.value : this.state.value;

        var textareaProps = (_textareaProps = {
            className: cn('control')
        }, _textareaProps[this.props.autosize ? 'inputRef' : 'ref'] = function (control) {
            _this2.control = control;
        }, _textareaProps.autoComplete = this.props.autocomplete === false ? 'off' : 'on', _textareaProps.disabled = this.props.disabled, _textareaProps.id = this.props.id, _textareaProps.name = this.props.name, _textareaProps.value = value, _textareaProps.tabIndex = this.props.tabIndex, _textareaProps.placeholder = this.props.placeholder, _textareaProps.maxLength = this.props.maxLength, _textareaProps.onChange = this.handleChange, _textareaProps.onFocus = this.handleFocus, _textareaProps.onBlur = this.handleBlur, _textareaProps.onPaste = this.handlePaste, _textareaProps.onKeyPress = this.handleKeyPress, _textareaProps);

        return _react2.default.createElement(
            'span',
            {
                className: cn({
                    disabled: this.props.disabled,
                    focused: this.state.focused,
                    autosize: this.props.autosize,
                    size: this.props.size,
                    width: this.props.width,
                    resize: this.props.resize,
                    invalid: !!this.props.error,
                    'has-label': !!this.props.label,
                    'has-value': !!value
                }),
                ref: function ref(root) {
                    _this2.root = root;
                }
            },
            _react2.default.createElement(
                'span',
                { className: cn('inner') },
                !!this.props.label && _react2.default.createElement(
                    'span',
                    { className: cn('top') },
                    this.props.label
                ),
                !this.props.autosize ? _react2.default.createElement('textarea', textareaProps) : _react2.default.createElement(_reactTextareaAutosize2.default, _extends({}, textareaProps, {
                    maxRows: this.props.maxRows,
                    minRows: this.props.minRows,
                    style: { maxHeight: this.props.maxHeight },
                    onHeightChange: this.handleHeightChange
                })),
                (this.props.error || this.props.hint) && _react2.default.createElement(
                    'span',
                    { className: cn('sub') },
                    this.props.error || this.props.hint
                )
            )
        );
    };

    Textarea.prototype.handleFocus = function handleFocus() {
        this.setState({ focused: true });

        if (this.props.onFocus) {
            this.props.onFocus();
        }
    };

    Textarea.prototype.handleBlur = function handleBlur(event) {
        this.setState({ focused: false });

        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    Textarea.prototype.handleChange = function handleChange(event) {
        var value = event.target.value;

        this.setState({ value: value });

        if (this.props.onChange) {
            this.props.onChange(value);
        }
    };

    Textarea.prototype.handlePaste = function handlePaste(event) {
        if (this.props.onPaste) {
            this.props.onPaste(event);
        }
    };

    Textarea.prototype.handleHeightChange = function handleHeightChange(height) {
        if (this.props.onHeightChange) {
            this.props.onHeightChange(height);
        }
    };

    Textarea.prototype.handleKeyPress = function handleKeyPress(event) {
        if (this.props.onKeyPress) {
            this.props.onKeyPress(event);
        }
    };

    /**
     * Устанавливает фокус на поле ввода.
     *
     * @public
     */


    Textarea.prototype.focus = function focus() {
        this.control.focus();
    };

    /**
     * Снимает фокус с поля ввода.
     *
     * @public
     */


    Textarea.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    /**
     * Скроллит страницу до поля ввода.
     *
     * @public
     */


    Textarea.prototype.scrollTo = function scrollTo() {
        var elementRect = this.root.getBoundingClientRect();

        (0, _scrollTo3.default)({
            targetY: elementRect.top + window.pageYOffset - _vars.SCROLL_TO_CORRECTION
        });
    };

    return Textarea;
}(_react2.default.Component), _class3.defaultProps = {
    width: 'default',
    autocomplete: true,
    disabled: false,
    autosize: true,
    resize: 'none',
    size: 'm'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePaste', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePaste'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleHeightChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleHeightChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyPress', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyPress'), _class2.prototype)), _class2)) || _class) || _class);
Textarea.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Управление возможностью компонента занимать всю ширину родителя */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Управление автозаполнением компонента */
    autocomplete: _propTypes2.default.bool,
    /** Управление возможностью изменения значения компонента */
    disabled: _propTypes2.default.bool,
    /** Управление возможностью подстраивать высоту компонента под высоту текста  */
    autosize: _propTypes2.default.bool,
    /** Максимальное количество отображаемых строк (работает только вместе с autosize) */
    maxRows: _propTypes2.default.number,
    /** Минимальное количество отображаемых строк (работает только вместе c autosize) */
    minRows: _propTypes2.default.number,
    /** Максимальная высота элемента (работает только вместе с autosize) */
    maxHeight: _propTypes2.default.number,
    /** Максимальное число символов */
    maxLength: _propTypes2.default.number,
    /** Уникальный идентификатор блока */
    id: _propTypes2.default.string,
    /** Уникальное имя блока */
    name: _propTypes2.default.string,
    /** Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled) */
    defaultValue: _propTypes2.default.string,
    /** Содержимое поля ввода */
    value: _propTypes2.default.string,
    /** Последовательность перехода между контролами при нажатии на Tab */
    tabIndex: _propTypes2.default.number,
    /** Лейбл для поля */
    label: _propTypes2.default.node,
    /** Подсказка в поле */
    placeholder: _propTypes2.default.string,
    /** Подсказка под полем */
    hint: _propTypes2.default.node,
    /** Отображение ошибки */
    error: _propTypes2.default.node,
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Управление возможностью изменения размеров компонента */
    resize: _propTypes2.default.oneOf(['both', 'horizontal', 'vertical', 'none']),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Обработчик изменения значения 'value' */
    onChange: _propTypes2.default.func,
    /** Обработчик фокуса поля */
    onFocus: _propTypes2.default.func,
    /** Обработчик снятия фокуса c поля */
    onBlur: _propTypes2.default.func,
    /** Обработчик события вставки текста в поле */
    onPaste: _propTypes2.default.func,
    /** Обработчик события изменения высоты компонента со значением параметра "autosize" = true */
    onHeightChange: _propTypes2.default.func,
    /** Обработчик события нажатия клавиши при фокусе на поле */
    onKeyPress: _propTypes2.default.func
} : {};
exports.default = Textarea;
//# sourceMappingURL=textarea.js.map
