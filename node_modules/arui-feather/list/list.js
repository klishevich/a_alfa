'use strict';

exports.__esModule = true;

var _dec, _dec2, _class; /* This Source Code Form is subject to the terms of the Mozilla Public
                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Компонент списка.
 */
var List = (_dec = (0, _cn2.default)('list'), _dec2 = (0, _performance2.default)(true), _dec(_class = _dec2(_class = function (_React$Component) {
    _inherits(List, _React$Component);

    function List() {
        _classCallCheck(this, List);

        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    List.prototype.render = function render(cn) {
        var listElement = this.props.type !== 'ordered' ? 'ul' : 'ol';

        var listContent = (this.props.items || []).map(function (item) {
            return _react2.default.createElement(
                'li',
                {
                    key: 'item-' + item.key,
                    className: cn('item')
                },
                item.value
            );
        });

        var listProps = {
            className: cn({
                type: this.props.type
            }),
            id: this.props.id
        };

        return _react2.default.createElement(listElement, listProps, listContent);
    };

    return List;
}(_react2.default.Component)) || _class) || _class);
List.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Список элементов */
    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        /** Уникальный ключ элемента */
        key: _propTypes2.default.string.isRequired,
        /** Содержание элемента */
        value: _propTypes2.default.node.isRequired
    })),
    /** Тип списка */
    type: _propTypes2.default.oneOf(['default', 'ordered']),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string
} : {};
exports.default = List;
//# sourceMappingURL=list.js.map
