'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* eslint-disable jsx-a11y/click-events-have-key-events */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _close = require('../icon/ui/close');

var _close2 = _interopRequireDefault(_close);

var _iconButton = require('../icon-button');

var _iconButton2 = _interopRequireDefault(_iconButton);

var _popupContainerProvider = require('../popup-container-provider/popup-container-provider');

var _popupContainerProvider2 = _interopRequireDefault(_popupContainerProvider);

var _keyboardCode = require('../lib/keyboard-code');

var _keyboardCode2 = _interopRequireDefault(_keyboardCode);

var _scrollbarWidth = require('../lib/scrollbar-width');

var _scrollbarWidth2 = _interopRequireDefault(_scrollbarWidth);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _mq = require('../mq');

var _mq2 = _interopRequireDefault(_mq);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var SIDEBAR_WIDTH = 430;

var savedScrollPosition = void 0;

/**
 * Восстанавливает исходную позицию скролла
 * после закрытия сайдбара на мобильной версии.
 */
function setCurrentPosition() {
    document.body.style.top = '-' + savedScrollPosition + 'px';
    document.body.scrollTop = savedScrollPosition;
    document.documentElement.scrollTop = savedScrollPosition;
}

/**
 * Изменяет класс для body. Нужен для управления скроллом
 * основного экрана при показе сайдбара.
 *
 * @param {Boolean} visible Управление видимостью сайдбара.
 * @param {Boolean} hasOverlay Управление наличием оверлея для сайдбара.
 */
function setBodyClass(_ref) {
    var visible = _ref.visible,
        hasOverlay = _ref.hasOverlay;

    document.body.classList[visible ? 'add' : 'remove']('sidebar-visible');
    if (hasOverlay) document.body.classList[visible ? 'add' : 'remove']('sidebar-overlay');
    setCurrentPosition();
}

/**
 * Обрабатывает событие скролла на body,
 * сохраняя scrollTop для последующего использования в сайдбаре.
 */
function handleBodyScroll() {
    var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;

    if (scrollTop) {
        savedScrollPosition = scrollTop;
    }
}

/**
 * Компонент боковой панели aka холодильник.
 */
var Sidebar = (_dec = (0, _cn2.default)('sidebar'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Sidebar, _React$Component);

    function Sidebar() {
        var _temp, _this, _ret;

        _classCallCheck(this, Sidebar);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            isMobile: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    Sidebar.prototype.componentDidMount = function componentDidMount() {
        this.styleBodyRightMargin();
        setBodyClass({ visible: this.props.visible, hasOverlay: this.props.hasOverlay });
        if (this.props.visible) window.addEventListener('keydown', this.handleKeyDown);
        window.addEventListener('scroll', handleBodyScroll);
    };

    Sidebar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        setBodyClass({ visible: nextProps.visible, hasOverlay: nextProps.hasOverlay });

        if (nextProps.visible) {
            window.addEventListener('keydown', this.handleKeyDown);
        } else {
            window.removeEventListener('keydown', this.handleKeyDown);
        }
    };

    Sidebar.prototype.componentDidUpdate = function componentDidUpdate() {
        this.styleBodyRightMargin();
    };

    Sidebar.prototype.componentWillUnmount = function componentWillUnmount() {
        setBodyClass({ visible: false, hasOverlay: this.props.hasOverlay });
        window.removeEventListener('keydown', this.handleKeyDown);
        window.removeEventListener('scroll', handleBodyScroll);
    };

    Sidebar.prototype.render = function render(cn) {
        var _props = this.props,
            hasCloser = _props.hasCloser,
            children = _props.children,
            visible = _props.visible,
            headerContent = _props.headerContent,
            hasOverlay = _props.hasOverlay,
            width = _props.width;


        var offset = visible ? (0, _scrollbarWidth2.default)() : 0;
        var style = { width: this.state.isMobile ? '100%' : width + offset + 'px' };
        var contentStyle = { marginRight: this.state.isMobile ? 0 : '-' + offset + 'px' };

        return _react2.default.createElement(
            _popupContainerProvider2.default,
            { className: cn({ visible: visible }), style: style },
            _react2.default.createElement('div', {
                role: 'button',
                tabIndex: '-1',
                className: cn('overlay', { visible: visible && hasOverlay }),
                onClick: this.handleClose
            }),
            _react2.default.createElement(_mq2.default, {
                query: '--small-only',
                onMatchChange: this.handleMqMatchChange
            }),
            _react2.default.createElement(
                'div',
                {
                    className: cn('inner'),
                    id: this.props.id
                },
                _react2.default.createElement(
                    'header',
                    {
                        className: cn('header')
                    },
                    hasCloser && _react2.default.createElement(
                        'div',
                        { className: cn('closer') },
                        _react2.default.createElement(
                            _iconButton2.default,
                            {
                                size: this.state.isMobile ? 'm' : 'l',
                                onClick: this.handleClose
                            },
                            _react2.default.createElement(_close2.default, { size: this.state.isMobile ? 'm' : 'l' })
                        )
                    ),
                    headerContent ? this.renderHeaderContent(cn) : null
                ),
                _react2.default.createElement(
                    'div',
                    {
                        style: contentStyle,
                        className: cn('content')
                    },
                    children
                ),
                _react2.default.createElement('footer', { className: cn('footer') })
            )
        );
    };

    Sidebar.prototype.renderHeaderContent = function renderHeaderContent(cn) {
        return _react2.default.createElement(
            'div',
            { className: cn('header-content') },
            this.props.headerContent
        );
    };

    Sidebar.prototype.handleMqMatchChange = function handleMqMatchChange(isMatched) {
        this.setState({ isMobile: isMatched });
    };

    Sidebar.prototype.handleClose = function handleClose() {
        if (this.props.onCloserClick) {
            if (this.state.isMobile) {
                document.body.scrollTop = savedScrollPosition;
                document.documentElement.scrollTop = savedScrollPosition;
            }
            this.props.onCloserClick();
        }
    };

    Sidebar.prototype.handleKeyDown = function handleKeyDown(event) {
        switch (event.which) {
            case _keyboardCode2.default.ESCAPE:
                event.preventDefault();
                this.handleClose();
                break;
        }
    };

    Sidebar.prototype.styleBodyRightMargin = function styleBodyRightMargin() {
        var offset = this.props.visible ? (0, _scrollbarWidth2.default)() : 0;
        document.body.style.marginRight = !this.state.isMobile && this.props.hasOverlay ? offset + 'px' : 0;
    };

    return Sidebar;
}(_react2.default.Component), _class3.defaultProps = {
    hasOverlay: true,
    hasCloser: true,
    width: SIDEBAR_WIDTH
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleMqMatchChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMqMatchChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleClose', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClose'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyDown', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyDown'), _class2.prototype)), _class2)) || _class) || _class);
Sidebar.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Дочерние компоненты */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Признак для отрисовки элемента закрытия */
    hasCloser: _propTypes2.default.bool,
    /** Признак для отрисовки оверлея */
    hasOverlay: _propTypes2.default.bool,
    /** Признак появления сайдбара */
    visible: _propTypes2.default.bool.isRequired,
    /** Контент в шапке сайдбара */
    headerContent: _propTypes2.default.node,
    /** Ширина сайдбара */
    width: _propTypes2.default.number,
    /** Обработчик клика на элемент закрытия */
    onCloserClick: _propTypes2.default.func
} : {};
exports.default = Sidebar;
//# sourceMappingURL=sidebar.js.map
