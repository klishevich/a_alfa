{"version":3,"sources":["theme-provider/theme-provider.jsx"],"names":["ThemeProvider","getChildContext","theme","props","render","Children","only","children","Component","contextTypes","string","childContextTypes","propTypes","node","className","oneOf"],"mappings":";;;;mBAAA;;;;AAIA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;IAsBMA,a;;;;;;;;;4BAkBFC,e,8BAAkB;AACd,eAAO;AACHC,mBAAO,KAAKC,KAAL,CAAWD;AADf,SAAP;AAGH,K;;4BAEDE,M,qBAAS;AACL,eAAO,gBAAMC,QAAN,CAAeC,IAAf,CAAoB,KAAKH,KAAL,CAAWI,QAA/B,CAAP;AACH,K;;;EA1BuB,gBAAMC,S,UAUvBC,Y,GAAe;AAClBP,WAAO,oBAAKQ;AADM,C,SAIfC,iB,GAAoB;AACvBT,WAAO,oBAAKQ;AADW,C;AAdzBV,a,CACKY,S,2CAAY;AACf;AACAL,cAAU,oBAAKM,IAFA;AAGf;AACAC,eAAW,oBAAKJ,MAJD;AAKf;AACAR,WAAO,oBAAKa,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX;AANQ,C;kBA4BRf,a","file":"theme-provider.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport Type from 'prop-types';\n\n/**\n * Компонент задающий тему для своих дочерних компонентов.\n * Важно! Может содержать в себе строго один дочерний компонент.\n *\n * @example\n * ```javascript\n * import ThemeProvider from 'arui-feather/theme-provider';\n * import Page from 'arui-feather/page';\n * import Heading from 'arui-feather/heading';\n *\n * <ThemeProvider theme=\"alfa-on-color\">\n *    <Page>\n *       <Heading>Заголовок страницы</Heading>\n *       <div style={{ background: \"white\" }}>\n *           <ThemeProvider theme=\"alfa-on-white\">\n *               Врезка белого цвета на странице...\n *           </ThemeProvider>\n *       </div>\n *    </Page>\n * </ThemeProvider>\n * ```\n */\nclass ThemeProvider extends React.Component {\n    static propTypes = {\n        /** Дочерний элемент `ThemeProvider` */\n        children: Type.node,\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white'])\n    };\n\n    static contextTypes = {\n        theme: Type.string\n    };\n\n    static childContextTypes = {\n        theme: Type.string\n    };\n\n    getChildContext() {\n        return {\n            theme: this.props.theme\n        };\n    }\n\n    render() {\n        return React.Children.only(this.props.children);\n    }\n}\n\nexport default ThemeProvider;\n"]}