{"version":3,"sources":["money-input/money-input.jsx"],"names":["DEFAULT_FRACTION_SIZE","DEFAULT_INTEGER_SIZE","INTEGER_PART_SIZE","getValueParts","value","replace","split","slice","splitInteger","str","length","from","to","concat","MoneyInput","state","componentWillMount","updateMaskByValue","getValue","componentWillReceiveProps","nextProps","props","render","cn","Input","root","maskPattern","getMaxLength","handleChange","handleProcessMaskInputEvent","event","currentValue","mask","format","newValue","target","fractionPart","undefined","substring","setState","onChange","Number","focus","blur","scrollTo","integerPart","integerPartLength","Math","max","min","integerLength","Array","join","reverse","fractionLength","getMaskedInputInstance","setMask","maxLength","floor","Component","defaultProps","propTypes","number"],"mappings":"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","file":"money-input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint react/prop-types: 0 */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Input from '../input/input';\nimport Mask from '../masked-input/mask';\n\nimport cn from '../cn';\nimport performance from '../performance';\n\nconst DEFAULT_FRACTION_SIZE = 2;\nconst DEFAULT_INTEGER_SIZE = 9;\nconst INTEGER_PART_SIZE = 3;\n\n/**\n * Возвращает целую и дробную часть значения в виде массива.\n * Если дробная часть не равна `undefined`, значит введена дробная часть\n * или хотя бы запятая.\n *\n * @param {String} value Значение\n * @returns {Array.<String>}\n */\nfunction getValueParts(value) {\n    return value\n        .replace(/[.бю]/g, ',') // Заменяем точки, `б` и `ю` на запятые.\n        .replace(/[^\\d,]/g, '') // Удаляем все, что не является цифрой или запятой.\n        .split(',') // Разделяем по запятой.\n        .slice(0, 2); // Отрезаем, если больше, чем один фрагмент после запятой.\n}\n\n\n/**\n * Сплитит интегер в группы по 3.\n *\n * @param {String} str Строка интегера\n * @returns {String}\n */\nfunction splitInteger(str) {\n    if (str.length <= INTEGER_PART_SIZE) {\n        return [str];\n    }\n\n    let from = str.length - INTEGER_PART_SIZE;\n    let to = str.length;\n\n    return [str.slice(from, to)].concat(splitInteger(str.slice(0, from)));\n}\n\n/**\n * Компонент поля для ввода суммы. Может принимать в качестве значения либо число, либо число с сотой долей.\n *\n * @extends Input\n */\n@cn('money-input', Input)\n@performance()\nclass MoneyInput extends React.Component {\n    static propTypes = {\n        ...Input.propTypes,\n        /** Максимально допустимая длина значения до запятой */\n        integerLength: Type.number,\n        /** Максимально допустимая длина значения после запятой */\n        fractionLength: Type.number\n    };\n\n    static defaultProps = {\n        fractionLength: DEFAULT_FRACTION_SIZE,\n        integerLength: DEFAULT_INTEGER_SIZE\n    };\n\n    state = {\n        value: ''\n    };\n\n    /**\n     * @type {String}\n     */\n    maskPattern;\n\n    /**\n     * @type {InputMask.Pattern}\n     */\n    mask;\n\n    /**\n     * @type {Input}\n     */\n    root;\n\n    componentWillMount() {\n        this.updateMaskByValue(this.getValue());\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.updateMaskByValue(nextProps.value || '');\n        }\n    }\n\n    render(cn, Input) {\n        return (\n            <Input\n                { ...this.props }\n                ref={ (root) => { this.root = root; } }\n                className={ cn() }\n                formNoValidate={ true }\n                mask={ this.maskPattern }\n                maxLength={ this.getMaxLength() }\n                value={ this.getValue() }\n                onChange={ this.handleChange }\n                onProcessMaskInputEvent={ this.handleProcessMaskInputEvent }\n            />\n        );\n    }\n\n    @autobind\n    handleProcessMaskInputEvent(event) {\n        let currentValue = this.mask.format(this.getValue());\n        let newValue = event.target.value;\n\n        // При удалении отрезаем запятую, если исчезла дробная часть.\n        if (newValue.length < currentValue.length) {\n            let fractionPart = getValueParts(newValue)[1]; // Берем значение после запятой\n\n            // `fractionPart !== undefined` - значит запятая введена, но\n            // `fractionPart.length === 0` - значит цифр после запятой нет.\n            if (fractionPart !== undefined && fractionPart.length === 0) {\n                newValue = newValue.substring(0, newValue.length - 1);\n                event.target.value = newValue;\n            }\n        }\n\n        this.updateMaskByValue(newValue);\n    }\n\n    @autobind\n    handleChange(value) {\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value, Number(value.replace(/[^\\d,]/g, '').replace(/,/g, '.')));\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        this.root.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        this.root.scrollTo();\n    }\n\n    /**\n     * Обновляет маску по значению: группирует целую часть в блоки по три символа.\n     *\n     * @param {String} value Значение\n     */\n    updateMaskByValue(value) {\n        let [integerPart, fractionPart] = getValueParts(value);\n\n        let integerPartLength = Math.max(Math.min(integerPart.length || 1, this.props.integerLength));\n        this.maskPattern = splitInteger((new Array(integerPartLength + 1)).join('1')).reverse().join(' ');\n\n        if (fractionPart !== undefined && this.props.fractionLength > 0) {\n            this.maskPattern += `,${(new Array(this.props.fractionLength + 1)).join('1')}`;\n        }\n\n        this.mask = new Mask(this.maskPattern);\n\n        if (this.root) {\n            this.root.getMaskedInputInstance().setMask(this.maskPattern);\n        }\n    }\n\n    /**\n     * Расчитывает максимально допустимую длинну поля ввода.\n     *\n     * @returns {Number}\n     */\n    getMaxLength() {\n        let maxLength = Math.floor((this.props.integerLength - 1) / INTEGER_PART_SIZE) + this.props.integerLength;\n\n        if (this.props.fractionLength) {\n            maxLength += 1 + this.props.fractionLength;\n        }\n\n        return maxLength;\n    }\n\n    /**\n     * Возвращает актуальное значение для рендера.\n     *\n     * @returns {String}\n     */\n    getValue() {\n        return this.props.value !== undefined ? this.props.value : this.state.value;\n    }\n}\n\nexport default MoneyInput;\n"]}