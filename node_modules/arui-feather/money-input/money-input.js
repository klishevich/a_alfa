'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* eslint react/prop-types: 0 */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _input = require('../input/input');

var _input2 = _interopRequireDefault(_input);

var _mask = require('../masked-input/mask');

var _mask2 = _interopRequireDefault(_mask);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT_FRACTION_SIZE = 2;
var DEFAULT_INTEGER_SIZE = 9;
var INTEGER_PART_SIZE = 3;

/**
 * Возвращает целую и дробную часть значения в виде массива.
 * Если дробная часть не равна `undefined`, значит введена дробная часть
 * или хотя бы запятая.
 *
 * @param {String} value Значение
 * @returns {Array.<String>}
 */
function getValueParts(value) {
    return value.replace(/[.бю]/g, ',') // Заменяем точки, `б` и `ю` на запятые.
    .replace(/[^\d,]/g, '') // Удаляем все, что не является цифрой или запятой.
    .split(',') // Разделяем по запятой.
    .slice(0, 2); // Отрезаем, если больше, чем один фрагмент после запятой.
}

/**
 * Сплитит интегер в группы по 3.
 *
 * @param {String} str Строка интегера
 * @returns {String}
 */
function splitInteger(str) {
    if (str.length <= INTEGER_PART_SIZE) {
        return [str];
    }

    var from = str.length - INTEGER_PART_SIZE;
    var to = str.length;

    return [str.slice(from, to)].concat(splitInteger(str.slice(0, from)));
}

/**
 * Компонент поля для ввода суммы. Может принимать в качестве значения либо число, либо число с сотой долей.
 *
 * @extends Input
 */
var MoneyInput = (_dec = (0, _cn2.default)('money-input', _input2.default), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(MoneyInput, _React$Component);

    function MoneyInput() {
        var _temp, _this, _ret;

        _classCallCheck(this, MoneyInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            value: ''
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * @type {String}
     */


    /**
     * @type {InputMask.Pattern}
     */


    /**
     * @type {Input}
     */


    MoneyInput.prototype.componentWillMount = function componentWillMount() {
        this.updateMaskByValue(this.getValue());
    };

    MoneyInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
            this.updateMaskByValue(nextProps.value || '');
        }
    };

    MoneyInput.prototype.render = function render(cn, Input) {
        var _this2 = this;

        return _react2.default.createElement(Input, _extends({}, this.props, {
            ref: function ref(root) {
                _this2.root = root;
            },
            className: cn(),
            formNoValidate: true,
            mask: this.maskPattern,
            maxLength: this.getMaxLength(),
            value: this.getValue(),
            onChange: this.handleChange,
            onProcessMaskInputEvent: this.handleProcessMaskInputEvent
        }));
    };

    MoneyInput.prototype.handleProcessMaskInputEvent = function handleProcessMaskInputEvent(event) {
        var currentValue = this.mask.format(this.getValue());
        var newValue = event.target.value;

        // При удалении отрезаем запятую, если исчезла дробная часть.
        if (newValue.length < currentValue.length) {
            var fractionPart = getValueParts(newValue)[1]; // Берем значение после запятой

            // `fractionPart !== undefined` - значит запятая введена, но
            // `fractionPart.length === 0` - значит цифр после запятой нет.
            if (fractionPart !== undefined && fractionPart.length === 0) {
                newValue = newValue.substring(0, newValue.length - 1);
                event.target.value = newValue;
            }
        }

        this.updateMaskByValue(newValue);
    };

    MoneyInput.prototype.handleChange = function handleChange(value) {
        this.setState({ value: value });

        if (this.props.onChange) {
            this.props.onChange(value, Number(value.replace(/[^\d,]/g, '').replace(/,/g, '.')));
        }
    };

    /**
     * Устанавливает фокус на поле ввода.
     *
     * @public
     */


    MoneyInput.prototype.focus = function focus() {
        this.root.focus();
    };

    /**
     * Убирает фокус с поля ввода.
     *
     * @public
     */


    MoneyInput.prototype.blur = function blur() {
        this.root.blur();
    };

    /**
     * Скроллит страницу до поля ввода.
     *
     * @public
     */


    MoneyInput.prototype.scrollTo = function scrollTo() {
        this.root.scrollTo();
    };

    /**
     * Обновляет маску по значению: группирует целую часть в блоки по три символа.
     *
     * @param {String} value Значение
     */


    MoneyInput.prototype.updateMaskByValue = function updateMaskByValue(value) {
        var _getValueParts = getValueParts(value),
            integerPart = _getValueParts[0],
            fractionPart = _getValueParts[1];

        var integerPartLength = Math.max(Math.min(integerPart.length || 1, this.props.integerLength));
        this.maskPattern = splitInteger(new Array(integerPartLength + 1).join('1')).reverse().join(' ');

        if (fractionPart !== undefined && this.props.fractionLength > 0) {
            this.maskPattern += ',' + new Array(this.props.fractionLength + 1).join('1');
        }

        this.mask = new _mask2.default(this.maskPattern);

        if (this.root) {
            this.root.getMaskedInputInstance().setMask(this.maskPattern);
        }
    };

    /**
     * Расчитывает максимально допустимую длинну поля ввода.
     *
     * @returns {Number}
     */


    MoneyInput.prototype.getMaxLength = function getMaxLength() {
        var maxLength = Math.floor((this.props.integerLength - 1) / INTEGER_PART_SIZE) + this.props.integerLength;

        if (this.props.fractionLength) {
            maxLength += 1 + this.props.fractionLength;
        }

        return maxLength;
    };

    /**
     * Возвращает актуальное значение для рендера.
     *
     * @returns {String}
     */


    MoneyInput.prototype.getValue = function getValue() {
        return this.props.value !== undefined ? this.props.value : this.state.value;
    };

    return MoneyInput;
}(_react2.default.Component), _class3.defaultProps = {
    fractionLength: DEFAULT_FRACTION_SIZE,
    integerLength: DEFAULT_INTEGER_SIZE
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleProcessMaskInputEvent', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleProcessMaskInputEvent'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleChange'), _class2.prototype)), _class2)) || _class) || _class);
MoneyInput.propTypes = process.env.NODE_ENV !== "production" ? Object.assign({}, _input2.default.propTypes, {
    /** Максимально допустимая длина значения до запятой */
    integerLength: _propTypes2.default.number,
    /** Максимально допустимая длина значения после запятой */
    fractionLength: _propTypes2.default.number
}) : {};
exports.default = MoneyInput;
//# sourceMappingURL=money-input.js.map
