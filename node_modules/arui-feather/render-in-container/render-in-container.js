'use strict';

exports.__esModule = true;

var _dec, _class, _desc, _value, _class2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                           * License, v. 2.0. If a copy of the MPL was not distributed with this
                                           * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _deprecatedDecorator = require('deprecated-decorator');

var _deprecatedDecorator2 = _interopRequireDefault(_deprecatedDecorator);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _propTypes3 = require('../lib/prop-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * @deprecated since v11.0.0
 *
 * Компонент, позволяющий визуализировать другие компоненты в произвольном контейнере.
 */
var RenderInContainer = (_dec = (0, _deprecatedDecorator2.default)('ReactDOM v16 with createPortal'), _dec(_class = (_class2 = function (_React$Component) {
    _inherits(RenderInContainer, _React$Component);

    function RenderInContainer() {
        _classCallCheck(this, RenderInContainer);

        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    RenderInContainer.prototype.componentDidMount = function componentDidMount() {
        this.buildElements();
        this.renderLayer();
    };

    RenderInContainer.prototype.componentDidUpdate = function componentDidUpdate() {
        if (this.container !== this.getContainer()) {
            this.buildElements();
        }
        this.renderLayer();
    };

    RenderInContainer.prototype.componentWillUnmount = function componentWillUnmount() {
        _reactDom2.default.unmountComponentAtNode(this.element);
        this.container.removeChild(this.element);
    };

    RenderInContainer.prototype.render = function render() {
        return false;
    };

    RenderInContainer.prototype.renderLayer = function renderLayer() {
        if (this.props.className) {
            this.element.className = this.props.className.toString();
        }

        _reactDom2.default.unstable_renderSubtreeIntoContainer(this, this.props.children, this.element, this.handleRender);
    };

    RenderInContainer.prototype.handleRender = function handleRender() {
        if (this.props.onRender) {
            this.props.onRender();
        }
    };

    /**
     * Возвращает HTMLElement враппера компонента.
     *
     * @public
     * @returns {HTMLElement}
     */


    RenderInContainer.prototype.getNode = function getNode() {
        return this.element;
    };

    /**
     * Возвращает HTMLElement контейнера, в который отрендерился компонент.
     *
     * @public
     * @returns {HTMLElement}
     */


    RenderInContainer.prototype.getContainer = function getContainer() {
        return this.props.container || document.body;
    };

    RenderInContainer.prototype.buildElements = function buildElements() {
        if (this.element && this.container) {
            _reactDom2.default.unmountComponentAtNode(this.element);
            this.container.removeChild(this.element);
        }

        this.container = this.getContainer();
        this.element = document.createElement('div');

        this.container.appendChild(this.element);
    };

    return RenderInContainer;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class2.prototype, 'handleRender', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleRender'), _class2.prototype)), _class2)) || _class);
RenderInContainer.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Дочерние элементы контейнера */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Контейнер, в котором будет визуализирован компонент */
    container: _propTypes3.HtmlElement,
    /** Callback на рендер компонента */
    onRender: _propTypes2.default.func
} : {};
exports.default = RenderInContainer;
//# sourceMappingURL=render-in-container.js.map
