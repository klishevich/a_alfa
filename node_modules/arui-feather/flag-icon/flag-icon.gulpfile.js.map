{"version":3,"sources":["flag-icon/flag-icon.gulpfile.js"],"names":["buffer","require","del","fs","gm","gulp","hbs","imagemin","rename","merge","path","spritesmith","SIZES","DIMENSIONS","s","m","l","xl","COMPONENT_DIR","SPRITES_IMG_DIR","CHUNKS_IMG_DIR","getImageHeightBySize","size","ratio","width","height","optimizeGmFile","file","noProfile","quality","colors","task","forEach","cssChunksTemplate","compile","readFileSync","toString","cssChunksData","chunks","src","pipe","basename","toLowerCase","resize","done","error","dimensions","east","south","dest","url","source","split","name","extname","push","on","retinaChunks","map","item","replace","writeFileSync","spriteData","cssName","imgName","retinaImgName","retinaSrcFilter","cssTemplate","cssOpts","cssVarMap","sprite","selector","source_image","indexOf","imageStream","img","optipng","optimizationLevel","cssStream","css","concat"],"mappings":"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","file":"flag-icon.gulpfile.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint import/no-extraneous-dependencies: [2, {\"devDependencies\": true}] */\n\nconst buffer = require('vinyl-buffer');\nconst del = require('del');\nconst fs = require('fs');\nconst gm = require('gulp-gm');\nconst gulp = require('gulp');\nconst hbs = require('handlebars');\nconst imagemin = require('gulp-imagemin');\nconst rename = require('gulp-rename');\nconst merge = require('merge-stream');\nconst path = require('path');\nconst spritesmith = require('gulp.spritesmith');\n\nconst SIZES = ['s', 'm', 'l', 'xl'];\nconst DIMENSIONS = {\n    s: [15, 12],\n    m: [20, 15],\n    l: [22, 17],\n    xl: [24, 20]\n};\n\nconst COMPONENT_DIR = './';\nconst SPRITES_IMG_DIR = './images/sprites';\nconst CHUNKS_IMG_DIR = './images/chunks';\n\nfunction getImageHeightBySize(size, ratio = 1) {\n    return {\n        width: DIMENSIONS[size][0] * ratio,\n        height: DIMENSIONS[size][1] * ratio\n    };\n}\n\nfunction optimizeGmFile(file) {\n    return file.noProfile().quality(60).colors(24);\n}\n\ngulp.task('clean:flag-icon', () => del(\n    [`${COMPONENT_DIR}/flag-icon_size_*.css`, SPRITES_IMG_DIR, CHUNKS_IMG_DIR])\n);\n\nSIZES.forEach((size) => {\n    let cssChunksTemplate = hbs.compile(fs.readFileSync(`${COMPONENT_DIR}/flag-icon.chunks.css.hbs`).toString());\n    let cssChunksData = { size, chunks: [] };\n\n    // Process 2-char country code files only (ignore subregions)\n    gulp.task(`flag-icon:resize-${size}`, () => gulp.src('../../node_modules/region-flags/png/??.png')\n        .pipe(rename((path) => { path.basename = path.basename.toLowerCase(); }))\n        // You need graphicsmagick installed on your system:\n        // https://github.com/scalableminds/gulp-gm#graphicsmagick-or-imagemagick\n        .pipe(gm((file => file.resize(\n            getImageHeightBySize(size, 2).width,\n            getImageHeightBySize(size, 2).height\n        ))))\n        .pipe(gm((file, done) => {\n            // We need to run through new dimensions & resize with even numbers if it has odd ones\n            // https://github.com/twolfson/gulp.spritesmith/issues/57\n            // https://github.com/katapad/evenizer\n            file.size((error, dimensions) => {\n                let { width, height } = dimensions;\n\n                if (error) throw error;\n\n                let east = width % 2 === 1 ? 1 : 0;\n                let south = height % 2 === 1 ? 1 : 0;\n\n                if (east || south) {\n                    done(null, optimizeGmFile(file.resize(\n                        width + east,\n                        height + south,\n                        '!' // Override aspect ratio\n                    )));\n                } else {\n                    done(null, optimizeGmFile(file));\n                }\n            });\n        }))\n        .pipe(gulp.dest(`${CHUNKS_IMG_DIR}/${size}/2x`))\n        .pipe(gm((file, done) => {\n            file.size((error, dimensions) => {\n                if (error) throw error;\n\n                done(null, optimizeGmFile(file.resize(\n                    dimensions.width / 2,\n                    dimensions.height / 2\n                )));\n            });\n        }))\n        // We need to save files on disk cause of spritesmith's retinaSrcFilter inability to read streams\n        .pipe(gulp.dest(`${CHUNKS_IMG_DIR}/${size}/1x`))\n    );\n\n    gulp.task(`flag-icon:chunks-${size}`, [`flag-icon:resize-${size}`],\n        () => gulp.src(`${CHUNKS_IMG_DIR}/${size}/1x/*.png`)\n            .pipe(gm((file, done) => {\n                file.size((error, dimensions) => {\n                    if (error) throw error;\n\n                    let url = file.source.split(/\\/1x\\//g);\n                    let name = path.basename(file.source, path.extname(file.source));\n                    cssChunksData.chunks.push({\n                        width: `${dimensions.width}px`,\n                        height: `${dimensions.height}px`,\n                        name,\n                        url: `${CHUNKS_IMG_DIR}/${size}/1x/${url[1]}`\n                    });\n\n                    done(null, file);\n                });\n            }))\n            .on('end', () => {\n                cssChunksData.retinaChunks = cssChunksData.chunks.map(item => ({\n                    name: item.name,\n                    url: item.url.replace('/1x/', '/2x/')\n                }));\n\n                fs.writeFileSync(\n                    `${COMPONENT_DIR}/flag-icon_size_${size}.chunks.css`,\n                    cssChunksTemplate(cssChunksData)\n                );\n            })\n    );\n\n    gulp.task(`flag-icon:sprite-${size}`, [`flag-icon:resize-${size}`], () => {\n        let spriteData = gulp.src(`${CHUNKS_IMG_DIR}/${size}/**/*.png`)\n            .pipe(spritesmith({\n                cssName: `flag-icon_size_${size}.sprite.css`,\n                imgName: `flag-icon_size_${size}@1x.png`,\n                retinaImgName: `flag-icon_size_${size}@2x.png`,\n                retinaSrcFilter: [`${CHUNKS_IMG_DIR}/${size}/2x/*.png`],\n                cssTemplate: `${COMPONENT_DIR}/flag-icon.sprite.css.hbs`,\n                cssOpts: { size },\n                cssVarMap: (sprite) => {\n                    sprite.selector = `.flag-icon_country_${sprite.name}`;\n\n                    // https://github.com/twolfson/gulp.spritesmith/issues/124\n                    if (sprite.source_image.indexOf('2x') !== -1) { sprite.name += '-2x'; }\n                }\n            }));\n\n        let imageStream = spriteData.img\n            .pipe(buffer())\n            .pipe(imagemin([\n                imagemin.optipng({ optimizationLevel: 7 })\n            ]))\n            .pipe(gulp.dest(SPRITES_IMG_DIR));\n\n        let cssStream = spriteData.css\n            .pipe(gulp.dest(COMPONENT_DIR));\n\n        return merge(imageStream, cssStream);\n    });\n});\n\ngulp.task('default', ['clean:flag-icon']\n    .concat(SIZES.map(size => `flag-icon:chunks-${size}`))\n    .concat(SIZES.map(size => `flag-icon:sprite-${size}`))\n);\n"]}