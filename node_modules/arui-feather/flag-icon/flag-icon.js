'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _class2, _temp; /* This Source Code Form is subject to the terms of the Mozilla Public
                                          * License, v. 2.0. If a copy of the MPL was not distributed with this
                                          * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Компонент флага в виде иконки.
 */
var FlagIcon = (_dec = (0, _cn2.default)('flag-icon'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_temp = _class2 = function (_React$Component) {
    _inherits(FlagIcon, _React$Component);

    function FlagIcon() {
        _classCallCheck(this, FlagIcon);

        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    FlagIcon.prototype.render = function render(cn) {
        return _react2.default.createElement('span', {
            className: cn({
                country: this.props.country,
                flat: this.props.isFlat,
                mode: this.props.mode,
                size: this.props.size
            })
        });
    };

    return FlagIcon;
}(_react2.default.Component), _class2.defaultProps = {
    isFlat: false,
    mode: 'chunk',
    size: 'm'
}, _temp)) || _class) || _class);
FlagIcon.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Код страны из <a href="https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank">ISO 3166-1 alpha-2</a> */
    country: _propTypes2.default.string,
    /** Режим отображения */
    mode: _propTypes2.default.oneOf(['chunk', 'sprite']),
    /** Управление наличием тени у компонента */
    isFlat: _propTypes2.default.bool,
    /** Дочерние элементы `FlagIcon` */
    children: _propTypes2.default.node,
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
} : {};
exports.default = FlagIcon;
//# sourceMappingURL=flag-icon.js.map
