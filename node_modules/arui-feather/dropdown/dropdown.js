'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _button = require('../button/button');

var _button2 = _interopRequireDefault(_button);

var _link = require('../link/link');

var _link2 = _interopRequireDefault(_link);

var _popup = require('../popup/popup');

var _popup2 = _interopRequireDefault(_popup);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

var _vars = require('../vars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент «выпадашка»: ссылка или кнопка. По клику показывается Popup.
 */
var Dropdown = (_dec = (0, _cn2.default)('dropdown'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Dropdown, _React$Component);

    function Dropdown() {
        var _temp, _this, _ret;

        _classCallCheck(this, Dropdown);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            opened: false,
            switcherHovered: false,
            popupHovered: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    Dropdown.prototype.componentDidMount = function componentDidMount() {
        this.popup.setTarget(this.switcher.getNode());
    };

    Dropdown.prototype.render = function render(cn) {
        return _react2.default.createElement(
            'div',
            { className: cn(), id: this.props.id },
            this.renderSwitcher(cn),
            this.renderPopup(cn)
        );
    };

    Dropdown.prototype.renderSwitcher = function renderSwitcher(cn) {
        var content = this.props.children || this.props.switcherText;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;

        return this.props.switcherType === 'button' ? this.renderSwitcherButton(cn, content, opened) : this.renderSwitcherLink(cn, content);
    };

    Dropdown.prototype.renderSwitcherButton = function renderSwitcherButton(cn, content, opened) {
        var _this2 = this;

        return _react2.default.createElement(
            _button2.default,
            {
                className: cn('switcher'),
                size: this.props.size,
                ref: function ref(switcher) {
                    _this2.switcher = switcher;
                },
                disabled: this.props.disabled,
                togglable: this.props.togglable,
                checked: this.props.togglable === 'check' && opened,
                onClick: !this.props.disabled ? this.handleSwitcherClick : undefined,
                onMouseEnter: this.handleSwitcherMouseEnter,
                onMouseLeave: this.handleSwitcherMouseLeave
            },
            content
        );
    };

    Dropdown.prototype.renderSwitcherLink = function renderSwitcherLink(cn, content) {
        var _this3 = this;

        return _react2.default.createElement(_link2.default, {
            className: cn('switcher'),
            size: this.props.size,
            ref: function ref(switcher) {
                _this3.switcher = switcher;
            },
            disabled: this.props.disabled,
            pseudo: true,
            text: content,
            onClick: !this.props.disabled ? this.handleSwitcherClick : undefined,
            onMouseEnter: this.handleSwitcherMouseEnter,
            onMouseLeave: this.handleSwitcherMouseLeave
        });
    };

    Dropdown.prototype.renderPopup = function renderPopup(cn) {
        var _this4 = this;

        var mainOffset = void 0;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;

        if (this.props.popupProps === undefined || this.props.popupProps && this.props.popupProps.type !== 'tooltip') {
            switch (this.props.size) {
                case 's':
                case 'm':
                    mainOffset = _vars.POPUP_MAIN_OFFSET / 2;break;
                case 'l':
                case 'xl':
                    mainOffset = _vars.POPUP_MAIN_OFFSET;break;
            }
        }

        var popupProps = Object.assign({
            className: cn('popup'),
            size: this.props.size,
            mainOffset: mainOffset
        }, this.props.popupProps);

        return _react2.default.createElement(
            _popup2.default,
            _extends({}, popupProps, {
                ref: function ref(popup) {
                    _this4.popup = popup;
                },
                visible: !this.props.disabled && opened || this.props.mode === 'hover' && (this.state.switcherHovered || this.state.popupHovered),
                onMouseEnter: this.handlePopupMouseEnter,
                onMouseLeave: this.handlePopupMouseLeave,
                onClickOutside: this.handlePopupClickOutside
            }),
            this.props.popupContent
        );
    };

    Dropdown.prototype.handleSwitcherClick = function handleSwitcherClick() {
        var newOpenedStatusValue = this.props.opened !== undefined ? !this.props.opened : !this.state.opened;

        this.setState({
            opened: newOpenedStatusValue
        });

        if (this.props.onSwitcherClick) {
            this.props.onSwitcherClick(newOpenedStatusValue);
        }
    };

    Dropdown.prototype.handleSwitcherMouseEnter = function handleSwitcherMouseEnter() {
        this.setState({ switcherHovered: true });

        if (this.props.onSwitcherMouseEnter) {
            this.props.onSwitcherMouseEnter();
        }
    };

    Dropdown.prototype.handleSwitcherMouseLeave = function handleSwitcherMouseLeave() {
        this.setState({ switcherHovered: false });

        if (this.props.onSwitcherMouseLeave) {
            this.props.onSwitcherMouseLeave();
        }
    };

    Dropdown.prototype.handlePopupMouseEnter = function handlePopupMouseEnter() {
        this.setState({ popupHovered: true });

        if (this.props.onPopupMouseEnter) {
            this.props.onPopupMouseEnter();
        }
    };

    Dropdown.prototype.handlePopupMouseLeave = function handlePopupMouseLeave() {
        this.setState({ popupHovered: false });

        if (this.props.onPopupMouseLeave) {
            this.props.onPopupMouseLeave();
        }
    };

    Dropdown.prototype.handlePopupClickOutside = function handlePopupClickOutside() {
        this.setState({ opened: false });

        if (this.props.onPopupClickOutside) {
            this.props.onPopupClickOutside();
        }
    };

    return Dropdown;
}(_react2.default.Component), _class3.defaultProps = {
    switcherType: 'link',
    switcherText: 'Switcher',
    disabled: false,
    popupProps: {
        target: 'anchor'
    },
    size: 'm'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleSwitcherClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSwitcherClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSwitcherMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSwitcherMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSwitcherMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleSwitcherMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePopupMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePopupMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePopupMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePopupMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePopupClickOutside', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePopupClickOutside'), _class2.prototype)), _class2)) || _class) || _class);
Dropdown.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Тип компонента */
    switcherType: _propTypes2.default.oneOf(['link', 'button']),
    /** Текст кнопки компонента */
    switcherText: _propTypes2.default.node,
    /** Компонент [Popup](#!/Popup) */
    popupContent: _propTypes2.default.node,
    /** Свойства для компонента [Popup](#!/Popup) */
    popupProps: _propTypes2.default.shape({
        className: _propTypes2.default.string,
        type: _propTypes2.default.oneOf(['default', 'tooltip']),
        height: _propTypes2.default.oneOf(['default', 'available', 'adaptive']),
        directions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['anchor', 'top-left', 'top-center', 'top-right', 'left-top', 'left-center', 'left-bottom', 'right-top', 'right-center', 'right-bottom', 'bottom-left', 'bottom-center', 'bottom-right'])),
        target: _propTypes2.default.oneOf(['anchor', 'position', 'screen']),
        mainOffset: _propTypes2.default.number,
        secondaryOffset: _propTypes2.default.number,
        fitContaiterOffset: _propTypes2.default.number,
        invalid: _propTypes2.default.bool,
        visible: _propTypes2.default.bool,
        padded: _propTypes2.default.bool,
        size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
        theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
        onMouseEnter: _propTypes2.default.func,
        onMouseLeave: _propTypes2.default.func,
        onClickOutside: _propTypes2.default.func,
        minWidth: _propTypes2.default.number,
        maxWidth: _propTypes2.default.number
    }),
    /** Управление возможностью отображать попап при наведении курсора */
    mode: _propTypes2.default.oneOf(['hover', 'normal']),
    /** Управление возможностью открытия попапа */
    disabled: _propTypes2.default.bool,
    /** Управление состоянием открыт/закрыт попапа */
    opened: _propTypes2.default.bool,
    /** Только для switcherType='button'. Тип переключателя для кнопки, 'check' */
    togglable: _propTypes2.default.oneOf(['button', 'check']),
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Дочерние элементы `Dropdown` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Обработчик клика по кнопке компонента */
    onSwitcherClick: _propTypes2.default.func,
    /** Обработчик события наведения курсора на кнопку компонента */
    onSwitcherMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с кнопки компонента */
    onSwitcherMouseLeave: _propTypes2.default.func,
    /** Обработчик события наведения курсора на попап */
    onPopupMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с попапа */
    onPopupMouseLeave: _propTypes2.default.func,
    /** Обработчик события клика попапа за пределами попапа */
    onPopupClickOutside: _propTypes2.default.func
} : {};
exports.default = Dropdown;
//# sourceMappingURL=dropdown.js.map
