{"version":3,"sources":["lib/prop-types.js"],"names":["deprecated","deprecatedType","createMappingPropValidator","createChainableTypeChecker","validate","checkType","isRequired","props","propName","componentName","location","undefined","Error","chainedCheckType","bind","propTypeIsHtmlElement","HTMLElement","propType","message","warned","args","prop","process","env","NODE_ENV","console","warn","call","oldType","newType","oldResult","newResult","HtmlElement","validationMapping","controllingPropName","validateProp","controllingPropValue","controlledPropValue","propsDefined","availableOptions","Array","isArray","isValidProp","indexOf"],"mappings":"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","file":"prop-types.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nfunction createChainableTypeChecker(validate) {\n    function checkType(isRequired, props, propName, componentName, location) {\n        componentName = componentName || '';\n        if (props[propName] === null || props[propName] === undefined) {\n            if (isRequired) {\n                return new Error(\n                    `Required prop \\`${propName}\\` was not specified in \\`${componentName}\\`.`\n                );\n            }\n            return null;\n        }\n\n        return validate(props, propName, componentName, location);\n    }\n\n    let chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n}\n\nfunction propTypeIsHtmlElement(props, propName, componentName) {\n    if (!(props[propName] instanceof (typeof HTMLElement === 'undefined' ? {} : HTMLElement))) {\n        return new Error(\n            `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`.\n            Expected valid HTMLElement object, ${typeof props[propName]} given.`\n        );\n    }\n    return null;\n}\n\nexport function deprecated(propType, message) {\n    let warned = false;\n    return function (...args) {\n        const [props, propName, componentName] = args;\n        const prop = props[propName];\n        if (prop !== undefined && prop !== null && !warned) {\n            warned = true;\n            if (process.env.NODE_ENV !== 'production') {\n                // eslint-disable-next-line no-console\n                console.warn(`Property '${propName}' of '${componentName}' is deprecated. ${message}`);\n            }\n        }\n        return propType.call(this, ...args);\n    };\n}\n\nexport function deprecatedType(oldType, newType, message) {\n    let warned = false;\n\n    return function (...args) {\n        const [, propName, componentName] = args;\n        const oldResult = oldType.call(this, ...args);\n        const newResult = newType.call(this, ...args);\n        if (process.env.NODE_ENV !== 'production' && !oldResult && !warned && newResult) {\n            warned = true;\n            // eslint-disable-next-line no-console\n            console.warn(`Given type of '${propName}' of '${componentName}' is deprecated. ${message}`);\n        }\n        return newResult;\n    };\n}\n\nexport const HtmlElement = createChainableTypeChecker(propTypeIsHtmlElement);\n\nexport function createMappingPropValidator(validationMapping, controllingPropName) {\n    return function validateProp(props, propName, componentName) {\n        const controllingPropValue = props[controllingPropName];\n        const controlledPropValue = props[propName];\n\n        const propsDefined = controllingPropValue && controlledPropValue;\n        const availableOptions = validationMapping[controllingPropValue];\n        if (!propsDefined || !Array.isArray(availableOptions)) {\n            return null;\n        }\n\n        const isValidProp = availableOptions.indexOf(props[propName]) !== -1;\n        if (!isValidProp) {\n            return new Error(`Invalid prop '${propName}' supplied to ${componentName}. \n                Expected one of ${availableOptions} for prop '${controllingPropName}' equal to ${controllingPropValue}`\n            );\n        }\n\n        return null;\n    };\n}\n"]}