'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _dropdown = require('../dropdown/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _link = require('../link/link');

var _link2 = _interopRequireDefault(_link);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент элемента меню. Как правило, используется совместно с `Menu`.
 */
var MenuItem = (_dec = (0, _cn2.default)('menu-item'), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(MenuItem, _React$Component);

    function MenuItem() {
        var _temp, _this, _ret;

        _classCallCheck(this, MenuItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            hovered: false,
            focused: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    MenuItem.prototype.render = function render(cn) {
        var _this2 = this;

        var content = this.props.children || this.props.value;
        var itemElement = void 0;
        var menuItemProps = {
            ref: function ref(root) {
                _this2.root = root;
            }
        };

        switch (this.props.type) {
            case 'dropdown':
                itemElement = _react2.default.createElement(_dropdown2.default, {
                    ref: function ref(control) {
                        _this2.control = control;
                    },
                    className: cn('control') + ' ' + cn('dropdown'),
                    size: this.props.size,
                    opened: this.state.hovered,
                    switcherType: 'link',
                    switcherText: content,
                    popupContent: this.props.popup,
                    popupProps: {
                        directions: ['bottom-left'],
                        target: 'anchor'
                    },
                    mode: 'hover',
                    onSwitcherClick: this.handleClick,
                    onSwitcherMouseEnter: this.handleMouseEnter,
                    onSwitcherMouseLeave: this.handleMouseLeave
                });
                break;
            case 'block':
                menuItemProps = {
                    ref: function ref(control) {
                        _this2.root = control;
                        _this2.control = control;
                    },
                    onClick: this.handleClick,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                };
                itemElement = _react2.default.createElement(
                    'span',
                    { className: cn('control') },
                    content
                );

                break;
            case 'link':
            default:
                itemElement = _react2.default.createElement(
                    _link2.default,
                    {
                        ref: function ref(control) {
                            _this2.control = control;
                        },
                        className: cn('control') + ' ' + cn('link'),
                        size: this.props.size,
                        pseudo: this.props.view === 'pseudo',
                        disabled: this.props.disabled,
                        checked: this.props.checked,
                        text: this.props.view !== 'plain' && content,
                        url: this.props.url,
                        target: this.props.target,
                        onClick: this.handleClick,
                        onFocus: this.handleFocus,
                        onBlur: this.handleBlur,
                        onMouseEnter: this.handleMouseEnter,
                        onMouseLeave: this.handleMouseLeave
                    },
                    this.props.view === 'plain' && content
                );
                break;
        }

        return _react2.default.createElement(
            'div',
            _extends({
                className: cn({
                    disabled: this.props.disabled,
                    checked: this.props.checked,
                    hidden: this.props.hidden,
                    type: this.props.type,
                    hovered: this.props.hovered === undefined ? this.state.hovered : this.props.hovered,
                    focused: this.state.focused
                })
            }, menuItemProps),
            itemElement
        );
    };

    MenuItem.prototype.handleClick = function handleClick(event) {
        if (this.props.disabled) {
            event.preventDefault();
            return;
        }

        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };

    MenuItem.prototype.handleFocus = function handleFocus(event) {
        this.setState({ focused: true });

        if (this.props.onFocus) {
            this.props.onFocus(event);
        }
    };

    MenuItem.prototype.handleBlur = function handleBlur(event) {
        this.setState({ focused: false });

        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    MenuItem.prototype.handleMouseEnter = function handleMouseEnter(event) {
        this.setState({ hovered: true });

        if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event);
        }
    };

    MenuItem.prototype.handleMouseLeave = function handleMouseLeave(event) {
        this.setState({ hovered: false });

        if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
        }
    };

    /**
     * Возвращает корневой `HTMLElement` компонента.
     *
     * @public
     * @returns {HTMLElement}
     */


    MenuItem.prototype.getNode = function getNode() {
        return this.root;
    };

    /**
     * Устанавливает фокус на элементе меню.
     *
     * @public
     */


    MenuItem.prototype.focus = function focus() {
        this.control.focus();
    };

    /**
     * Убирает фокус с элемента меню.
     *
     * @public
     */


    MenuItem.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    return MenuItem;
}(_react2.default.Component), _class3.defaultProps = {
    type: 'link',
    view: 'plain'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseLeave'), _class2.prototype)), _class2)) || _class) || _class);
MenuItem.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Тип элемента меню */
    type: _propTypes2.default.oneOf(['link', 'dropdown', 'block']),
    /** Тип ссылки, для компонента с type='link' */
    view: _propTypes2.default.oneOf(['plain', 'underlined', 'pseudo']),
    /** href ссылки, для компонента с type='link' */
    url: _propTypes2.default.string,
    /** target для ссылки */
    target: _propTypes2.default.oneOf(['_self', '_blank', '_parent', '_top']),
    /** Уникальное значение элемента. Для использования в Menu */
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    /** Попап для компонента с type='dropdown' */
    popup: _propTypes2.default.node,
    /** Управление возможностью выбирать данный компонент */
    disabled: _propTypes2.default.bool,
    /** Управление состоянием выбран/не выбран компонента */
    checked: _propTypes2.default.bool,
    /** Управление видимостью компонента */
    hidden: _propTypes2.default.bool,
    /** Управление визуальным выделением компонента */
    hovered: _propTypes2.default.bool,
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Дочерние элементы `MenuItem` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Только для type='link', обработчик клика по компоненту */
    onClick: _propTypes2.default.func,
    /** Обработчик фокуса компонента */
    onFocus: _propTypes2.default.func,
    /** Обработчик снятия фокуса компонента */
    onBlur: _propTypes2.default.func,
    /** Обработчик события наведения курсора на элемент меню */
    onMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с элемента меню */
    onMouseLeave: _propTypes2.default.func
} : {};
exports.default = MenuItem;
//# sourceMappingURL=menu-item.js.map
