'use strict';

exports.__esModule = true;

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _exenv = require('exenv');

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _renderInContainer = require('../render-in-container/render-in-container');

var _renderInContainer2 = _interopRequireDefault(_renderInContainer);

var _resizeSensor = require('../resize-sensor/resize-sensor');

var _resizeSensor2 = _interopRequireDefault(_resizeSensor);

var _calcDrawingParams = require('./calc-drawing-params');

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _propTypes3 = require('../lib/prop-types');

var _window = require('../lib/window');

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var IS_REACT_16 = !!_reactDom2.default.createPortal;

/**
 * @typedef {Object} Point
 * @property {Number} left Координата по оси x
 * @property {Number} top Координата по оси y
 */

/**
 * @typedef {Object} PopupOffsetCollection
 * @property {Number} main Смещение в пикселях всплывающего окна относительно основного направления
 * @property {Number} second Смещение в пикселях всплывающего окна относительно второстепенного направления
 * @property {Number} viewport Минимально допустимое смещение в пикселях всплывающего окна от края окна браузера
 */

/**
 * @typedef {Object} PopupHash
 * @property {Array.<String>} directions Список возмножных расположений попапа
 * @property {String} bestDirection Приоритетное расположение
 * @property {Boolean} isHeightAdaptive Подстраивается ли высота попапа под край окна
 * @property {Boolean} isHeightAvailable Занимает ли попап всю возможную высоту
 * @property {Boolean} isTargetAnchor Привязан ли попап к другому элементу
 * @property {Boolean} isHaveTooltip Имеет ли попап тип "tooltip"
 * @property {Number} width Ширина попапа
 * @property {Number} height Высота попапа
 * @property {Number} contentWidth Ширина контента в попапе
 * @property {Number} contentHeight Высота контента в попапе
 * @property {PopupOffsetCollection} offset Список смещений попапа
 * @property {Point} targetPosition Координаты точки привязки попапа
 * @property {HTMLElement} targetAnchor Объект элемента, к которому привязан попап, в DOM дереве
 */

/**
 * Компонент popup'а.
 */
var Popup = (_dec = (0, _cn2.default)('popup'), _dec2 = (0, _performance2.default)(true), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Popup, _React$Component);

    function Popup() {
        var _temp, _this, _ret;

        _classCallCheck(this, Popup);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            direction: null,
            hasScrollbar: false,
            receivedContainer: false,
            styles: {
                top: 0,
                left: 0,
                height: 'auto'
            },
            topGradientStyles: {
                width: '100%'
            },
            bottomGradientStyles: {
                width: '100%'
            }
        }, _this.anchor = null, _this.clickEventBindTimeout = null, _this.domElemPopup = null, _this.domElemPopupInner = null, _this.domElemPopupContent = null, _this.isWindowClickBinded = false, _this.position = null, _this.handleWindowResize = (0, _lodash2.default)(function () {
            if (_this.isPropsToPositionCorrect()) {
                _this.redraw();
            }
        }, 200), _temp), _possibleConstructorReturn(_this, _ret);
    }

    Popup.prototype.componentWillMount = function componentWillMount() {
        if (this.context.isInCustomContainer && this.context.renderContainerElement && this.context.positioningContainerElement) {
            this.setState({
                receivedContainer: true
            });
        }
    };

    Popup.prototype.componentDidMount = function componentDidMount() {
        if (this.props.onClickOutside) {
            this.ensureClickEvent();
        }

        if (this.inner && (this.props.height === 'adaptive' || this.props.target === 'screen')) {
            this.setGradientStyles();
        }

        window.addEventListener('resize', this.handleWindowResize);
    };

    Popup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
        var _this2 = this;

        if (!this.state.receivedContainer && nextContext.renderContainerElement && nextContext.positioningContainerElement) {
            this.setState({
                receivedContainer: true
            }, function () {
                if (_this2.props.visible) {
                    _this2.redraw();
                }
            });

            return;
        }

        if (nextProps.visible !== this.props.visible) {
            this.redraw();
        }
    };

    Popup.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onClickOutside) {
            if (prevProps.onClickOutside !== this.props.onClickOutside) {
                this.ensureClickEvent();
            } else if (prevProps.visible !== this.props.visible) {
                this.ensureClickEvent(!this.props.visible);
            }
        }
    };

    Popup.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onClickOutside) {
            this.ensureClickEvent(true);
        }

        // Cancel debouncing to avoid `this.setState()` invocation in unmounted component state
        this.handleWindowResize.cancel();
        window.removeEventListener('resize', this.handleWindowResize);
    };

    Popup.prototype.render = function render(cn) {
        var _this3 = this;

        if (!_exenv.canUseDOM || !this.isContainerReady()) {
            return null;
        }

        var template = _react2.default.createElement(
            'div',
            {
                ref: function ref(popup) {
                    _this3.popup = popup;
                },
                'data-for': this.props.for,
                className: cn({
                    direction: this.state.direction,
                    type: this.props.target === 'anchor' && this.props.type === 'tooltip' && this.props.type,
                    target: this.props.target,
                    size: this.props.size,
                    visible: this.props.visible,
                    height: this.props.height,
                    padded: this.props.padded
                }),
                id: this.props.id,
                style: Object.assign({}, this.state.styles, {
                    minWidth: this.getMinWidth(),
                    maxWidth: this.getMaxWidth()
                }),
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave
            },
            _react2.default.createElement(
                'div',
                { className: cn('container') },
                this.props.header && _react2.default.createElement(
                    'div',
                    { className: cn('header') },
                    this.props.header
                ),
                _react2.default.createElement(
                    'div',
                    {
                        ref: function ref(inner) {
                            _this3.inner = inner;
                        },
                        className: cn('inner'),
                        onScroll: this.handleInnerScroll
                    },
                    _react2.default.createElement(
                        'div',
                        { className: cn('content'), ref: function ref(content) {
                                _this3.content = content;
                            } },
                        this.props.children,
                        _react2.default.createElement(_resizeSensor2.default, { onResize: this.handleResize })
                    )
                ),
                this.state.hasScrollbar && _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement('div', {
                        className: cn('gradient', { top: true }),
                        style: this.state.topGradientStyles
                    }),
                    _react2.default.createElement('div', {
                        className: cn('gradient', { bottom: true }),
                        style: this.state.bottomGradientStyles
                    })
                )
            )
        );

        return IS_REACT_16 ? _reactDom2.default.createPortal(template, this.getRenderContainer()) : _react2.default.createElement(
            _renderInContainer2.default,
            { container: this.getRenderContainer() },
            template
        );
    };

    Popup.prototype.handleInnerScroll = function handleInnerScroll(event) {
        var _event$target = event.target,
            scrollTop = _event$target.scrollTop,
            offsetHeight = _event$target.offsetHeight,
            scrollHeight = _event$target.scrollHeight;

        var isTopReached = Math.round(scrollTop) === 0;
        var isBottomReached = Math.round(scrollTop) + offsetHeight === scrollHeight;

        if (this.props.height === 'adaptive' || this.props.target === 'screen') {
            var topGradientStyles = {
                width: this.state.topGradientStyles.width
            };
            var bottomGradientStyles = {
                width: this.state.bottomGradientStyles.width
            };

            if (isTopReached) {
                topGradientStyles.height = 0;
            }

            if (isBottomReached) {
                bottomGradientStyles.height = 0;
            }

            this.setState({
                topGradientStyles: topGradientStyles,
                bottomGradientStyles: bottomGradientStyles
            });
        }
    };

    Popup.prototype.handleMouseEnter = function handleMouseEnter() {
        if (this.props.onMouseEnter) {
            this.props.onMouseEnter();
        }
    };

    Popup.prototype.handleMouseLeave = function handleMouseLeave() {
        if (this.props.onMouseLeave) {
            this.props.onMouseLeave();
        }
    };

    Popup.prototype.handleWindowClick = function handleWindowClick(event) {
        if (this.props.onClickOutside && !!this.domElemPopup && (0, _window.isNodeOutsideElement)(event.target, this.domElemPopup)) {
            this.props.onClickOutside(event);
        }
    };

    Popup.prototype.handleResize = function handleResize() {
        if (!this.props.visible) {
            return;
        }

        this.redraw();
    };

    /**
     * Задает элемент, к которому будет привязан popup.
     *
     * @public
     * @param {HTMLElement} target Элемент, к которому будет привязан popup
     */


    Popup.prototype.setTarget = function setTarget(target) {
        if (this.anchor === target) {
            return;
        }

        this.anchor = target;
        this.redraw();
    };

    /**
     * Задает положение popup.
     *
     * @public
     * @param {Number} left x-coordinate
     * @param {Number} top y-coordinate
     */


    Popup.prototype.setPosition = function setPosition(left, top) {
        this.position = { left: left, top: top };
        this.redraw();
    };

    /**
     * Возвращает внутренний DOM узел.
     *
     * @public
     * @returns {HTMLElement}
     */


    Popup.prototype.getInnerNode = function getInnerNode() {
        return this.domElemPopupInner;
    };

    /**
     * Возвращает контейнер, в котором отрендерится попап.
     *
     * @returns {HTMLElement}
     */


    Popup.prototype.getRenderContainer = function getRenderContainer() {
        if (!this.context.isInCustomContainer) {
            return IS_REACT_16 ? document.body : null;
        }

        return this.context.renderContainerElement;
    };

    /**
     * Возвращает контейнер, внутрь которого надо вписать элемент.
     *
     * @returns {HTMLElement}
     */


    Popup.prototype.getPositioningContainer = function getPositioningContainer() {
        if (!this.context.isInCustomContainer) {
            return null;
        }

        return this.context.positioningContainerElement;
    };

    /**
     * Возвращает `true`, если контейнер, в котором должен быть отрисован
     * `Popup` уже находится в DOM. Для `Popup` без кастомного контейнера
     * роль контейнера выполняет `document.body` и этот для них этот метод
     * всегда вернете `true`.
     *
     * @returns {Boolean}
     */


    Popup.prototype.isContainerReady = function isContainerReady() {
        if (!this.context.isInCustomContainer) {
            return true;
        }

        return this.context.isInCustomContainer && this.state.receivedContainer;
    };

    /**
     * Возвращает `true`, если все необходимые для расчета положения `Popup`
     * внешние props заданы.
     *
     * @returns {Boolean}
     */


    Popup.prototype.isPropsToPositionCorrect = function isPropsToPositionCorrect() {
        return this.props.target === 'anchor' && this.anchor || this.props.target === 'position' && this.position || this.props.target === 'screen';
    };

    Popup.prototype.redraw = function redraw() {
        if (!_exenv.canUseDOM || !this.isContainerReady()) {
            return;
        }

        if (!this.isPropsToPositionCorrect()) {
            throw new Error('Cannot show popup without target or position');
        }

        if (!this.domElemPopup) {
            this.domElemPopup = this.popup;
            this.domElemPopupInner = this.inner;
            this.domElemPopupContent = this.content;
        }

        var popupHash = this.getPopupHash();
        var bestDrawingParams = void 0;

        switch (this.props.target) {
            case 'position':
                bestDrawingParams = { top: this.position.top, left: this.position.left };
                break;

            case 'screen':
                bestDrawingParams = {
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    overflow: this.inner.scrollHeight > this.inner.clientHeight
                };
                break;

            case 'anchor':
                bestDrawingParams = (0, _calcDrawingParams.calcBestDrawingParams)(popupHash, (0, _calcDrawingParams.calcTargetDimensions)(popupHash), (0, _calcDrawingParams.calcFitContainerDimensions)(popupHash));
                break;
        }

        this.setState({
            direction: bestDrawingParams.direction,
            hasScrollbar: bestDrawingParams.overflow,
            styles: this.getDrawingCss(bestDrawingParams)
        });

        this.setGradientStyles();
    };

    Popup.prototype.ensureClickEvent = function ensureClickEvent(isDestroy) {
        var _this4 = this;

        var isNeedBindEvent = isDestroy !== undefined ? !isDestroy : this.props.visible;

        // We need timeouts to not to catch the event that causes
        // popup opening (because it propagates to the `window`).
        if (this.clickEventBindTimeout) {
            clearTimeout(this.clickEventBindTimeout);
            this.clickEventBindTimeout = null;
        }

        this.clickEventBindTimeout = setTimeout(function () {
            if (!_this4.isWindowClickBinded && isNeedBindEvent) {
                window.addEventListener('click', _this4.handleWindowClick);
                window.addEventListener('touchend', _this4.handleWindowClick);
                _this4.isWindowClickBinded = true;
            } else if (_this4.isWindowClickBinded && !isNeedBindEvent) {
                window.removeEventListener('click', _this4.handleWindowClick);
                window.removeEventListener('touchend', _this4.handleWindowClick);
                _this4.isWindowClickBinded = false;
            }
        }, 0);
    };

    Popup.prototype.getDrawingCss = function getDrawingCss(drawingParams) {
        return {
            top: drawingParams.top,
            left: drawingParams.left,
            right: drawingParams.right,
            bottom: drawingParams.bottom,
            height: this.props.height === 'adaptive' ? drawingParams.height : 'auto'
        };
    };

    /**
     * @returns {Number}
     */


    Popup.prototype.getMinWidth = function getMinWidth() {
        return this.props.minWidth !== undefined ? this.props.minWidth : 0;
    };

    /**
     * @returns {Number}
     */


    Popup.prototype.getMaxWidth = function getMaxWidth() {
        return this.props.maxWidth !== undefined ? this.props.maxWidth : 'none';
    };

    /**
     * Get collection of popup properties.
     *
     * @returns {PopupHash}
     */


    Popup.prototype.getPopupHash = function getPopupHash() {
        return {
            directions: this.props.directions,
            bestDirection: this.state.direction,
            isHeightAdaptive: this.props.height === 'adaptive',
            isHeightAvailable: this.props.height === 'available',
            isTargetAnchor: this.props.target === 'anchor',
            isHaveTooltip: this.props.type === 'tooltip',
            width: this.domElemPopup.offsetWidth,
            height: this.domElemPopup.offsetHeight,
            contentWidth: this.domElemPopupContent.offsetWidth,
            contentHeight: this.domElemPopupContent.offsetHeight,
            offset: {
                main: this.props.mainOffset,
                second: this.props.secondaryOffset,
                fitContainer: this.props.fitContaiterOffset
            },
            targetPosition: this.position,
            targetAnchor: this.anchor,
            fitContainer: this.getPositioningContainer()
        };
    };

    Popup.prototype.setGradientStyles = function setGradientStyles() {
        var clientWidth = this.inner.clientWidth;


        this.setState({
            topGradientStyles: {
                width: clientWidth,
                height: 0
            },
            bottomGradientStyles: {
                width: clientWidth
            }
        });
    };

    return Popup;
}(_react2.default.Component), _class3.defaultProps = {
    visible: false,
    padded: true,
    secondaryOffset: 0,
    fitContaiterOffset: 0,
    target: 'anchor',
    size: 's'
}, _class3.contextTypes = {
    isInCustomContainer: _propTypes2.default.bool,
    renderContainerElement: _propTypes3.HtmlElement,
    positioningContainerElement: _propTypes3.HtmlElement
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleInnerScroll', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleInnerScroll'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseEnter', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseEnter'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleMouseLeave', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleWindowClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleWindowClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleResize', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleResize'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'redraw', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'redraw'), _class2.prototype)), _class2)) || _class) || _class);
Popup.propTypes = process.env.NODE_ENV !== "production" ? {
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Идентификатор компонента в DOM */
    id: _propTypes2.default.string,
    /** Дочерние элементы `Popup` */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** Тип попапа */
    type: _propTypes2.default.oneOf(['default', 'tooltip']),
    /** Подстраивание высоты попапа под край окна ('adaptive'), занятие попапом всей возможной высоты ('available'), 'default' */
    height: _propTypes2.default.oneOf(['default', 'available', 'adaptive']),
    /** Только для target='anchor', расположение (в порядке приоритета) относительно точки открытия. Первым указывается главное направление, через дефис - второстепенное направление */
    directions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['anchor', 'top-left', 'top-center', 'top-right', 'left-top', 'left-center', 'left-bottom', 'right-top', 'right-center', 'right-bottom', 'bottom-left', 'bottom-center', 'bottom-right'])),
    /** Привязка компонента к другому элементу на странице, или его расположение независимо от остальных: 'anchor', 'position', 'screen' */
    target: _propTypes2.default.oneOf(['anchor', 'position', 'screen']),
    /** Только для target='anchor'. Смещение в пикселях всплывающего окна относительно основного направления */
    mainOffset: _propTypes2.default.number,
    /** Только для target='anchor'. Смещение в пикселях всплывающего окна относительно второстепенного направления */
    secondaryOffset: _propTypes2.default.number,
    /** Только для target='anchor'. Минимально допустимое смещение в пикселях всплывающего окна от края его контейнера */
    fitContaiterOffset: _propTypes2.default.number,
    /** Управление видимостью компонента */
    visible: _propTypes2.default.bool,
    /** Управление выставлением модификатора для добавления внутренних отступов в стилях */
    padded: _propTypes2.default.bool,
    /** Элемент закреплённого заголовка для компонента */
    header: _propTypes2.default.node,
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Обработчик события наведения курсора на попап */
    onMouseEnter: _propTypes2.default.func,
    /** Обработчик события снятия курсора с попапа */
    onMouseLeave: _propTypes2.default.func,
    /** Обработчик клика вне компонента */
    onClickOutside: _propTypes2.default.func,
    /** Минимальная ширина попапа */
    minWidth: _propTypes2.default.number,
    /** Максимальная ширина попапа */
    maxWidth: _propTypes2.default.number,
    /** Указатель на родительский элемент */
    for: _propTypes2.default.string
} : {};
exports.default = Popup;
//# sourceMappingURL=popup.js.map
