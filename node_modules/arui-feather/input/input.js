'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _dec2, _class, _desc, _value, _class2, _class3, _temp2; /* This Source Code Form is subject to the terms of the Mozilla Public
                                                                   * License, v. 2.0. If a copy of the MPL was not distributed with this
                                                                   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var _autobind = require('core-decorators/lib/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _close = require('../icon/ui/close');

var _close2 = _interopRequireDefault(_close);

var _iconButton = require('../icon-button/icon-button');

var _iconButton2 = _interopRequireDefault(_iconButton);

var _maskedInput = require('../masked-input/masked-input');

var _maskedInput2 = _interopRequireDefault(_maskedInput);

var _cn = require('../cn');

var _cn2 = _interopRequireDefault(_cn);

var _performance = require('../performance');

var _performance2 = _interopRequireDefault(_performance);

var _scrollTo2 = require('../lib/scroll-to');

var _scrollTo3 = _interopRequireDefault(_scrollTo2);

var _vars = require('../vars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Компонент текстового поля ввода.
 */
var Input = (_dec = (0, _cn2.default)('input', _maskedInput2.default), _dec2 = (0, _performance2.default)(), _dec(_class = _dec2(_class = (_class2 = (_temp2 = _class3 = function (_React$Component) {
    _inherits(Input, _React$Component);

    function Input() {
        var _temp, _this, _ret;

        _classCallCheck(this, Input);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            focused: false,
            value: _this.props.defaultValue || ''
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * @type {HTMLSpanElement}
     */


    /**
     * @type {HTMLSpanElement}
     */


    /**
     * @type {HTMLInputElement}
     */


    Input.prototype.render = function render(cn, MaskedInput) {
        var _this2 = this;

        var hasAddons = !!this.props.rightAddons || !!this.props.leftAddons;
        var value = this.props.value !== undefined ? this.props.value : this.state.value;
        var focused = this.getFocused();

        return _react2.default.createElement(
            'span',
            {
                className: cn({
                    type: this.props.type,
                    disabled: this.props.disabled,
                    focused: focused,
                    size: this.props.size,
                    width: this.props.width,
                    'has-addons': hasAddons,
                    'has-clear': !!this.props.clear,
                    'has-icon': !!this.props.icon,
                    'has-label': !!this.props.label,
                    'has-value': !!value,
                    invalid: !!this.props.error
                }),
                ref: function ref(root) {
                    _this2.root = root;
                }
            },
            _react2.default.createElement(
                'span',
                { className: cn('inner') },
                !!this.props.label && _react2.default.createElement(
                    'span',
                    { className: cn('top') },
                    this.props.label
                ),
                this.renderContent(cn, MaskedInput),
                (this.props.error || this.props.hint) && _react2.default.createElement(
                    'span',
                    { className: cn('sub') },
                    this.props.error || this.props.hint
                )
            )
        );
    };

    Input.prototype.renderContent = function renderContent(cn, MaskedInput) {
        var _this3 = this;

        var isMaskedInput = this.props.mask !== undefined;
        var value = this.props.value !== undefined ? this.props.value : this.state.value;

        var inputProps = {
            className: cn('control'),
            type: this.props.type,
            formNoValidate: this.props.formNoValidate,
            autoComplete: this.props.autocomplete === false ? 'off' : 'on',
            disabled: this.props.disabled || this.props.disabledAttr,
            maxLength: this.props.maxLength,
            id: this.props.id,
            name: this.props.name,
            value: value,
            tabIndex: this.props.tabIndex,
            placeholder: this.props.placeholder,
            pattern: this.props.pattern,
            ref: function ref(control) {
                _this3.control = control;
            },
            title: this.props.title,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            onClick: this.handleClick,
            onBlur: this.handleBlur,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp,
            onPaste: this.handlePaste,
            onTouchStart: this.handleTouchStart,
            onTouchEnd: this.handleTouchEnd,
            onTouchMove: this.handleTouchMove,
            onTouchCancel: this.handleTouchCancel
        };

        return _react2.default.createElement(
            'span',
            {
                className: cn('box'),
                key: 'input-wrapper',
                ref: function ref(box) {
                    _this3.box = box;
                }
            },
            this.props.leftAddons && _react2.default.createElement(
                'span',
                { className: cn('addons', { left: true }), key: 'left-addons' },
                this.props.leftAddons
            ),
            !isMaskedInput ? _react2.default.createElement('input', inputProps) : _react2.default.createElement(MaskedInput, _extends({}, inputProps, {
                mask: this.props.mask,
                formatCharacters: this.props.maskFormatCharacters,
                onProcessInputEvent: this.props.onProcessMaskInputEvent
            })),
            this.props.clear && value && _react2.default.createElement(
                _iconButton2.default,
                {
                    className: cn('clear'),
                    size: this.props.size,
                    onClick: this.handleClearClick
                },
                _react2.default.createElement(_close2.default, {
                    size: this.props.size
                })
            ),
            this.props.icon && _react2.default.createElement(
                'span',
                { className: cn('icon') },
                this.props.icon
            ),
            this.props.rightAddons && _react2.default.createElement(
                'span',
                { className: cn('addons', { right: true }), key: 'right-addons' },
                this.props.rightAddons
            )
        );
    };

    Input.prototype.handleFocus = function handleFocus(event) {
        this.setState({ focused: true });

        if (this.props.onFocus) {
            this.props.onFocus(event);
        }
    };

    Input.prototype.handleClick = function handleClick(event) {
        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };

    Input.prototype.handleBlur = function handleBlur(event) {
        this.setState({ focused: false });

        if (this.props.onBlur) {
            this.props.onBlur(event);
        }
    };

    Input.prototype.handleChange = function handleChange(event) {
        this.changeValue(event.target.value);
    };

    Input.prototype.handleClearClick = function handleClearClick() {
        this.changeValue('');

        if (this.props.onClearClick) {
            this.props.onClearClick();
        }

        this.focus();
    };

    Input.prototype.handleKeyDown = function handleKeyDown(event) {
        if (this.props.onKeyDown) {
            this.props.onKeyDown(event);
        }
    };

    Input.prototype.handleKeyUp = function handleKeyUp(event) {
        if (this.props.onKeyUp) {
            this.props.onKeyUp(event);
        }
    };

    Input.prototype.handlePaste = function handlePaste(event) {
        if (this.props.onPaste) {
            this.props.onPaste(event);
        }
    };

    Input.prototype.handleTouchStart = function handleTouchStart(event) {
        if (this.props.onTouchStart) {
            this.props.onTouchStart(event);
        }
    };

    Input.prototype.handleTouchEnd = function handleTouchEnd(event) {
        if (this.props.onTouchEnd) {
            this.props.onTouchEnd(event);
        }
    };

    Input.prototype.handleTouchMove = function handleTouchMove(event) {
        if (this.props.onTouchMove) {
            this.props.onTouchMove(event);
        }
    };

    Input.prototype.handleTouchCancel = function handleTouchCancel(event) {
        if (this.props.onTouchCancel) {
            this.props.onTouchCancel(event);
        }
    };

    /**
     * Возвращает корневой `HTMLElement` компонента.
     *
     * @public
     * @returns {HTMLElement}
     */


    Input.prototype.getNode = function getNode() {
        return this.root;
    };

    /**
     * Возвращает ссылку на инстанс контейнера для контрола.
     *
     * @public
     * @returns {HTMLSpanElement}
     */


    Input.prototype.getBoxNode = function getBoxNode() {
        return this.box;
    };

    /**
     * Возвращает ссылку на HTMLElement инпута.
     *
     * @public
     * @returns {HTMLInputElement}
     */


    Input.prototype.getControl = function getControl() {
        if (this.props.mask !== undefined) {
            return this.control.getControl();
        }

        return this.control;
    };

    /**
     * Возвращает ссылку на инстанс MaskedInput.
     * Если маска не была установлена, возвращает null.
     *
     * @public
     * @returns {MaskedInput|null}
     */


    Input.prototype.getMaskedInputInstance = function getMaskedInputInstance() {
        if (this.props.mask !== undefined) {
            return this.control;
        }

        return null;
    };

    /**
     * Устанавливает фокус на поле ввода.
     *
     * @public
     */


    Input.prototype.focus = function focus() {
        this.control.focus();
    };

    /**
     * Убирает фокус с поля ввода.
     *
     * @public
     */


    Input.prototype.blur = function blur() {
        if (document.activeElement) {
            document.activeElement.blur();
        }
    };

    /**
     * Скроллит страницу до поля ввода.
     *
     * @public
     */


    Input.prototype.scrollTo = function scrollTo() {
        (0, _scrollTo3.default)({
            targetY: this.root.getBoundingClientRect().top + window.pageYOffset - _vars.SCROLL_TO_CORRECTION
        });
    };

    /**
     * Устанавливает начальное и конечное положение выделения текста в элементе.
     *
     * @public
     * @param {Number} [start=0] Индекс первого выделенного символа.
     * @param {Number} [end=value.length] Индекс символа после последнего выделенного символа.
     */


    Input.prototype.setSelectionRange = function setSelectionRange() {
        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getControl().value.length;

        this.getControl().setSelectionRange(start, end);
    };

    /**
     * Изменяет текущение значение поля ввода и генерирует событие об этом.
     *
     * @param {String} value Новое значение
     */


    Input.prototype.changeValue = function changeValue(value) {
        if (this.props.value === undefined) {
            this.setState({ value: value });
        }

        if (this.props.onChange) {
            this.props.onChange(value);
        }
    };

    /**
     * Возвращает состояние фокуса.
     *
     * @returns {Boolean}
     */


    Input.prototype.getFocused = function getFocused() {
        return this.props.focused !== undefined ? this.props.focused : this.state.focused;
    };

    return Input;
}(_react2.default.Component), _class3.defaultProps = {
    formNoValidate: false,
    size: 'm',
    type: 'text'
}, _temp2), (_applyDecoratedDescriptor(_class2.prototype, 'handleFocus', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleBlur', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleChange', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleClearClick', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleClearClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyDown', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyDown'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleKeyUp', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleKeyUp'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handlePaste', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handlePaste'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleTouchStart', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleTouchStart'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleTouchEnd', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleTouchEnd'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleTouchMove', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleTouchMove'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleTouchCancel', [_autobind2.default], Object.getOwnPropertyDescriptor(_class2.prototype, 'handleTouchCancel'), _class2.prototype)), _class2)) || _class) || _class);
Input.propTypes = process.env.NODE_ENV !== "production" ? {
    /**
     * Тип поля.
     * Внимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.
     * Подробнее: <a href="http://w3c.github.io/html/sec-forms.html#does-not-apply" target="_blank">http://w3c.github.io/html/sec-forms.html#does-not-apply</a>
     */
    type: _propTypes2.default.oneOf(['number', 'card', 'email', 'file', 'hidden', 'money', 'password', 'tel', 'text']),
    /** Управление возможностью компонента занимать всю ширину родителя */
    width: _propTypes2.default.oneOf(['default', 'available']),
    /** Управление автозаполнением компонента */
    autocomplete: _propTypes2.default.bool,
    /** Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления */
    disabled: _propTypes2.default.bool,
    /** Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления) */
    disabledAttr: _propTypes2.default.bool,
    /** Управление возможностью изменения класса-модификатора компонента */
    focused: _propTypes2.default.bool,
    /** Максимальное число символов */
    maxLength: _propTypes2.default.number,
    /** Иконка компонента */
    icon: _propTypes2.default.node,
    /** Управление наличием крестика, сбрасывающего значение 'value' */
    clear: _propTypes2.default.bool,
    /** Уникальный идентификатор блока */
    id: _propTypes2.default.string,
    /** Уникальное имя блока */
    name: _propTypes2.default.string,
    /** Содержимое поля ввода */
    value: _propTypes2.default.string,
    /** Содержимое поля ввода, указанное по умолчанию */
    defaultValue: _propTypes2.default.string,
    /** Последовательность перехода между контролами при нажатии на Tab */
    tabIndex: _propTypes2.default.number,
    /** Определяет маску для ввода значений. <a href="https://github.com/insin/inputmask-core#pattern" target="_blank">Шаблон маски</a> */
    mask: _propTypes2.default.string,
    /** Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core` */
    maskFormatCharacters: _propTypes2.default.objectOf(_propTypes2.default.shape({
        validate: _propTypes2.default.func.isRequired,
        transform: _propTypes2.default.func
    })),
    /** Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах. */
    pattern: _propTypes2.default.string,
    /** Управление встроенной проверкой данных введённых пользователем в поле на корректность */
    formNoValidate: _propTypes2.default.bool,
    /** Добавление дополнительных элементов к инпуту слева */
    leftAddons: _propTypes2.default.node,
    /** Добавление дополнительных элементов к инпуту справа */
    rightAddons: _propTypes2.default.node,
    /** Лейбл для поля */
    label: _propTypes2.default.node,
    /** Подсказка в поле */
    placeholder: _propTypes2.default.string,
    /** Подсказка под полем */
    hint: _propTypes2.default.node,
    /** Отображение ошибки */
    error: _propTypes2.default.node,
    /** Размер компонента */
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    /** Тема компонента */
    theme: _propTypes2.default.oneOf(['alfa-on-color', 'alfa-on-white']),
    /** Дополнительный класс */
    className: _propTypes2.default.string,
    /** Тултип, который появляется при наведении  */
    title: _propTypes2.default.string,
    /** Обработчик изменения значения 'value' */
    onChange: _propTypes2.default.func,
    /** Обработчик фокуса поля */
    onFocus: _propTypes2.default.func,
    /** Обработчик клика по полю */
    onClick: _propTypes2.default.func,
    /** Обработчик снятия фокуса с поля */
    onBlur: _propTypes2.default.func,
    /** Обработчик клика по крестику сбрасываещему значение 'value' */
    onClearClick: _propTypes2.default.func,
    /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */
    onKeyDown: _propTypes2.default.func,
    /** Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */
    onKeyUp: _propTypes2.default.func,
    /** Обработчик события вставки текста в поле */
    onPaste: _propTypes2.default.func,
    /** Обработчик события касания по полю */
    onTouchStart: _propTypes2.default.func,
    /** Обработчик события прекращения касания по полю */
    onTouchEnd: _propTypes2.default.func,
    /** Обработчик события перемещения при касании по полю */
    onTouchMove: _propTypes2.default.func,
    /** Обработчик события прерывания касания по полю */
    onTouchCancel: _propTypes2.default.func,
    /** Обработчик, вызываемый перед началом ввода в маскированное поле */
    onProcessMaskInputEvent: _propTypes2.default.func
} : {};
exports.default = Input;
//# sourceMappingURL=input.js.map
