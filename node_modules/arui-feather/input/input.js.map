{"version":3,"sources":["input/input.jsx"],"names":["Input","state","focused","value","props","defaultValue","render","cn","MaskedInput","hasAddons","rightAddons","leftAddons","undefined","getFocused","type","disabled","size","width","clear","icon","label","invalid","error","root","renderContent","hint","isMaskedInput","mask","inputProps","className","formNoValidate","autoComplete","autocomplete","disabledAttr","maxLength","id","name","tabIndex","placeholder","pattern","ref","control","title","onChange","handleChange","onFocus","handleFocus","onClick","handleClick","onBlur","handleBlur","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","onPaste","handlePaste","onTouchStart","handleTouchStart","onTouchEnd","handleTouchEnd","onTouchMove","handleTouchMove","onTouchCancel","handleTouchCancel","box","left","maskFormatCharacters","onProcessMaskInputEvent","handleClearClick","right","event","setState","changeValue","target","onClearClick","focus","getNode","getBoxNode","getControl","getMaskedInputInstance","blur","document","activeElement","scrollTo","targetY","getBoundingClientRect","top","window","pageYOffset","setSelectionRange","start","end","length","Component","defaultProps","propTypes","oneOf","bool","number","node","string","objectOf","shape","validate","func","isRequired","transform","theme"],"mappings":"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","file":"input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport autobind from 'core-decorators/lib/autobind';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport IconClose from '../icon/ui/close';\nimport IconButton from '../icon-button/icon-button';\nimport MaskedInput from '../masked-input/masked-input';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент текстового поля ввода.\n */\n@cn('input', MaskedInput)\n@performance()\nclass Input extends React.Component {\n    static propTypes = {\n        /**\n         * Тип поля.\n         * Внимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.\n         * Подробнее: <a href=\"http://w3c.github.io/html/sec-forms.html#does-not-apply\" target=\"_blank\">http://w3c.github.io/html/sec-forms.html#does-not-apply</a>\n         */\n        type: Type.oneOf(['number', 'card', 'email', 'file', 'hidden', 'money', 'password', 'tel', 'text']),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Управление автозаполнением компонента */\n        autocomplete: Type.bool,\n        /** Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления */\n        disabled: Type.bool,\n        /** Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления) */\n        disabledAttr: Type.bool,\n        /** Управление возможностью изменения класса-модификатора компонента */\n        focused: Type.bool,\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Иконка компонента */\n        icon: Type.node,\n        /** Управление наличием крестика, сбрасывающего значение 'value' */\n        clear: Type.bool,\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Содержимое поля ввода */\n        value: Type.string,\n        /** Содержимое поля ввода, указанное по умолчанию */\n        defaultValue: Type.string,\n        /** Последовательность перехода между контролами при нажатии на Tab */\n        tabIndex: Type.number,\n        /** Определяет маску для ввода значений. <a href=\"https://github.com/insin/inputmask-core#pattern\" target=\"_blank\">Шаблон маски</a> */\n        mask: Type.string,\n        /** Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core` */\n        maskFormatCharacters: Type.objectOf(\n            Type.shape({\n                validate: Type.func.isRequired,\n                transform: Type.func\n            })\n        ),\n        /** Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах. */\n        pattern: Type.string,\n        /** Управление встроенной проверкой данных введённых пользователем в поле на корректность */\n        formNoValidate: Type.bool,\n        /** Добавление дополнительных элементов к инпуту слева */\n        leftAddons: Type.node,\n        /** Добавление дополнительных элементов к инпуту справа */\n        rightAddons: Type.node,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.string,\n        /** Тултип, который появляется при наведении  */\n        title: Type.string,\n        /** Обработчик изменения значения 'value' */\n        onChange: Type.func,\n        /** Обработчик фокуса поля */\n        onFocus: Type.func,\n        /** Обработчик клика по полю */\n        onClick: Type.func,\n        /** Обработчик снятия фокуса с поля */\n        onBlur: Type.func,\n        /** Обработчик клика по крестику сбрасываещему значение 'value' */\n        onClearClick: Type.func,\n        /** Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */\n        onKeyDown: Type.func,\n        /** Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте */\n        onKeyUp: Type.func,\n        /** Обработчик события вставки текста в поле */\n        onPaste: Type.func,\n        /** Обработчик события касания по полю */\n        onTouchStart: Type.func,\n        /** Обработчик события прекращения касания по полю */\n        onTouchEnd: Type.func,\n        /** Обработчик события перемещения при касании по полю */\n        onTouchMove: Type.func,\n        /** Обработчик события прерывания касания по полю */\n        onTouchCancel: Type.func,\n        /** Обработчик, вызываемый перед началом ввода в маскированное поле */\n        onProcessMaskInputEvent: Type.func\n    };\n\n    static defaultProps = {\n        formNoValidate: false,\n        size: 'm',\n        type: 'text'\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || ''\n    };\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    root;\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    box;\n\n    /**\n     * @type {HTMLInputElement}\n     */\n    control;\n\n    render(cn, MaskedInput) {\n        let hasAddons = !!this.props.rightAddons || !!this.props.leftAddons;\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n        let focused = this.getFocused();\n\n        return (\n            <span\n                className={ cn({\n                    type: this.props.type,\n                    disabled: this.props.disabled,\n                    focused,\n                    size: this.props.size,\n                    width: this.props.width,\n                    'has-addons': hasAddons,\n                    'has-clear': !!this.props.clear,\n                    'has-icon': !!this.props.icon,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    invalid: !!this.props.error\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    { this.renderContent(cn, MaskedInput) }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    renderContent(cn, MaskedInput) {\n        let isMaskedInput = this.props.mask !== undefined;\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let inputProps = {\n            className: cn('control'),\n            type: this.props.type,\n            formNoValidate: this.props.formNoValidate,\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled || this.props.disabledAttr,\n            maxLength: this.props.maxLength,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            pattern: this.props.pattern,\n            ref: (control) => { this.control = control; },\n            title: this.props.title,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onClick: this.handleClick,\n            onBlur: this.handleBlur,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            onPaste: this.handlePaste,\n            onTouchStart: this.handleTouchStart,\n            onTouchEnd: this.handleTouchEnd,\n            onTouchMove: this.handleTouchMove,\n            onTouchCancel: this.handleTouchCancel\n        };\n\n        return (\n            <span\n                className={ cn('box') }\n                key='input-wrapper'\n                ref={ (box) => { this.box = box; } }\n            >\n                {\n                    this.props.leftAddons &&\n                    <span className={ cn('addons', { left: true }) } key='left-addons'>\n                        { this.props.leftAddons }\n                    </span>\n                }\n                {\n                    !isMaskedInput\n                        ? <input { ...inputProps } />\n                        : <MaskedInput\n                            { ...inputProps }\n                            mask={ this.props.mask }\n                            formatCharacters={ this.props.maskFormatCharacters }\n                            onProcessInputEvent={ this.props.onProcessMaskInputEvent }\n                        />\n                }\n                {\n                    this.props.clear && value &&\n                    <IconButton\n                        className={ cn('clear') }\n                        size={ this.props.size }\n                        onClick={ this.handleClearClick }\n                    >\n                        <IconClose\n                            size={ this.props.size }\n                        />\n                    </IconButton>\n                }\n                {\n                    this.props.icon &&\n                    <span className={ cn('icon') }>\n                        { this.props.icon }\n                    </span>\n                }\n                {\n                    this.props.rightAddons &&\n                    <span className={ cn('addons', { right: true }) } key='right-addons'>\n                        { this.props.rightAddons }\n                    </span>\n                }\n            </span>\n        );\n    }\n\n    @autobind\n    handleFocus(event) {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    }\n\n    @autobind\n    handleClick(event) {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        this.changeValue(event.target.value);\n    }\n\n    @autobind\n    handleClearClick() {\n        this.changeValue('');\n\n        if (this.props.onClearClick) {\n            this.props.onClearClick();\n        }\n\n        this.focus();\n    }\n\n    @autobind\n    handleKeyDown(event) {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleKeyUp(event) {\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(event);\n        }\n    }\n\n    @autobind\n    handlePaste(event) {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    }\n\n    @autobind\n    handleTouchStart(event) {\n        if (this.props.onTouchStart) {\n            this.props.onTouchStart(event);\n        }\n    }\n\n    @autobind\n    handleTouchEnd(event) {\n        if (this.props.onTouchEnd) {\n            this.props.onTouchEnd(event);\n        }\n    }\n\n    @autobind\n    handleTouchMove(event) {\n        if (this.props.onTouchMove) {\n            this.props.onTouchMove(event);\n        }\n    }\n\n    @autobind\n    handleTouchCancel(event) {\n        if (this.props.onTouchCancel) {\n            this.props.onTouchCancel(event);\n        }\n    }\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     *\n     * @public\n     * @returns {HTMLElement}\n     */\n    getNode() {\n        return this.root;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс контейнера для контрола.\n     *\n     * @public\n     * @returns {HTMLSpanElement}\n     */\n    getBoxNode() {\n        return this.box;\n    }\n\n    /**\n     * Возвращает ссылку на HTMLElement инпута.\n     *\n     * @public\n     * @returns {HTMLInputElement}\n     */\n    getControl() {\n        if (this.props.mask !== undefined) {\n            return this.control.getControl();\n        }\n\n        return this.control;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс MaskedInput.\n     * Если маска не была установлена, возвращает null.\n     *\n     * @public\n     * @returns {MaskedInput|null}\n     */\n    getMaskedInputInstance() {\n        if (this.props.mask !== undefined) {\n            return this.control;\n        }\n\n        return null;\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        scrollTo({\n            targetY: (this.root.getBoundingClientRect().top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n\n    /**\n     * Устанавливает начальное и конечное положение выделения текста в элементе.\n     *\n     * @public\n     * @param {Number} [start=0] Индекс первого выделенного символа.\n     * @param {Number} [end=value.length] Индекс символа после последнего выделенного символа.\n     */\n    setSelectionRange(start = 0, end = this.getControl().value.length) {\n        this.getControl().setSelectionRange(start, end);\n    }\n\n    /**\n     * Изменяет текущение значение поля ввода и генерирует событие об этом.\n     *\n     * @param {String} value Новое значение\n     */\n    changeValue(value) {\n        if (this.props.value === undefined) {\n            this.setState({ value });\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    /**\n     * Возвращает состояние фокуса.\n     *\n     * @returns {Boolean}\n     */\n    getFocused() {\n        return this.props.focused !== undefined ? this.props.focused : this.state.focused;\n    }\n}\n\nexport default Input;\n"]}